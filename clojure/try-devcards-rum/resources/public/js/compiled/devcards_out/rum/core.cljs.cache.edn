{:rename-macros {}, :renames {}, :use-macros {call-all rum.util, collect rum.util, collect* rum.util}, :excludes #{ref}, :name rum.core, :imports nil, :requires {rum.cursor rum.cursor, gobj goog.object, goog.object goog.object, cljsjs.react cljsjs.react, rum.derived-atom rum.derived-atom, sablono.core sablono.core, cljsjs.react.dom cljsjs.react.dom, util rum.util, rum.util rum.util, cursor rum.cursor, derived-atom rum.derived-atom}, :uses {call-all rum.util, collect rum.util, collect* rum.util}, :defs {mount {:protocol-inline nil, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 214, :column 7, :end-line 214, :end-column 12, :arglists (quote ([component node])), :doc "Add component to the DOM tree. Idempotent. Subsequent mounts will just update component"}, :name rum.core/mount, :variadic false, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :end-column 12, :method-params ([component node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 214, :end-line 214, :max-fixed-arity 2, :fn-var true, :arglists (quote ([component node])), :doc "Add component to the DOM tree. Idempotent. Subsequent mounts will just update component"}, unmount {:protocol-inline nil, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 221, :column 7, :end-line 221, :end-column 14, :arglists (quote ([node])), :doc "Removes component from the DOM tree"}, :name rum.core/unmount, :variadic false, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :end-column 14, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 221, :end-line 221, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node])), :doc "Removes component from the DOM tree"}, local {:protocol-inline nil, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 283, :column 7, :end-line 283, :end-column 12, :arglists (quote ([initial] [initial key])), :doc "Mixin constructor. Adds an atom to component’s state that can be used to keep stuff\n   during component’s lifecycle. Component will be re-rendered if atom’s value changes.\n   Atom is stored under user-provided key or under `:rum/local` by default", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([initial] [initial key]), :arglists ([initial] [initial key]), :arglists-meta (nil nil)}}, :name rum.core/local, :variadic false, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([initial] [initial key]), :arglists ([initial] [initial key]), :arglists-meta (nil nil)}, :method-params ([initial] [initial key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 283, :end-line 283, :max-fixed-arity 2, :fn-var true, :arglists ([initial] [initial key]), :doc "Mixin constructor. Adds an atom to component’s state that can be used to keep stuff\n   during component’s lifecycle. Component will be re-rendered if atom’s value changes.\n   Atom is stored under user-provided key or under `:rum/local` by default"}, reactive {:name rum.core/reactive, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :line 304, :column 1, :end-line 304, :end-column 14, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 304, :column 6, :end-line 304, :end-column 14}, :doc "Mixin. Works in conjunction with `rum.core/react`"}, render-all {:protocol-inline nil, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 194, :column 8, :end-line 194, :end-column 18, :private true, :arglists (quote ([queue]))}, :private true, :name rum.core/render-all, :variadic false, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :end-column 18, :method-params ([queue]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 194, :end-line 194, :max-fixed-arity 1, :fn-var true, :arglists (quote ([queue]))}, ref-node {:protocol-inline nil, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 265, :column 7, :end-line 265, :end-column 15, :arglists (quote ([state key])), :doc "Given state and ref handle, returns DOM node associated with ref"}, :name rum.core/ref-node, :variadic false, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :end-column 15, :method-params ([state key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 265, :end-line 265, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state key])), :doc "Given state and ref handle, returns DOM node associated with ref"}, react {:protocol-inline nil, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 335, :column 7, :end-line 335, :end-column 12, :arglists (quote ([ref])), :doc "Works in conjunction with `rum.core/reactive` mixin. Use this function instead of\n   `deref` inside render, and your component will subscribe to changes happening\n   to the derefed atom."}, :name rum.core/react, :variadic false, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :end-column 12, :method-params ([ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 335, :end-line 335, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ref])), :doc "Works in conjunction with `rum.core/reactive` mixin. Use this function instead of\n   `deref` inside render, and your component will subscribe to changes happening\n   to the derefed atom."}, schedule {:name rum.core/schedule, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :line 175, :column 1, :end-line 175, :end-column 24, :private true, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 175, :column 16, :end-line 175, :end-column 24, :private true}}, request-render {:protocol-inline nil, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 206, :column 7, :end-line 206, :end-column 21, :arglists (quote ([component])), :doc "Schedules react component to be rendered on next animation frame"}, :name rum.core/request-render, :variadic false, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :end-column 21, :method-params ([component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 206, :end-line 206, :max-fixed-arity 1, :fn-var true, :arglists (quote ([component])), :doc "Schedules react component to be rendered on next animation frame"}, render-queue {:name rum.core/render-queue, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :line 191, :column 1, :end-line 191, :end-column 28, :private true, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 191, :column 16, :end-line 191, :end-column 28, :private true}}, portal {:protocol-inline nil, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 233, :column 7, :end-line 233, :end-column 13, :arglists (quote ([component node])), :doc "Render `component` in a DOM `node` that might be ouside of current DOM hierarchy"}, :name rum.core/portal, :variadic false, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :end-column 13, :method-params ([component node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 233, :end-line 233, :max-fixed-arity 2, :fn-var true, :arglists (quote ([component node])), :doc "Render `component` in a DOM `node` that might be ouside of current DOM hierarchy"}, with-key {:protocol-inline nil, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 241, :column 7, :end-line 241, :end-column 15, :arglists (quote ([component key])), :doc "Adds React key to component"}, :name rum.core/with-key, :variadic false, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :end-column 15, :method-params ([component key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 241, :end-line 241, :max-fixed-arity 2, :fn-var true, :arglists (quote ([component key])), :doc "Adds React key to component"}, extend! {:protocol-inline nil, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 20, :column 7, :end-line 20, :end-column 14, :arglists (quote ([obj props]))}, :name rum.core/extend!, :variadic false, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :end-column 14, :method-params ([obj props]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([obj props]))}, build-defcs {:protocol-inline nil, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 163, :column 7, :end-line 163, :end-column 18, :arglists (quote ([render-body mixins display-name]))}, :name rum.core/build-defcs, :variadic false, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :end-column 18, :method-params ([render-body mixins display-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 3, :fn-var true, :arglists (quote ([render-body mixins display-name]))}, *reactions* {:name rum.core/*reactions*, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :line 301, :column 1, :end-line 301, :end-column 37, :dynamic true, :private true, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 301, :column 26, :end-line 301, :end-column 37, :dynamic true, :private true}}, ref {:protocol-inline nil, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 259, :column 7, :end-line 259, :end-column 10, :arglists (quote ([state key])), :doc "Given state and ref handle, returns React component"}, :name rum.core/ref, :variadic false, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :end-column 10, :method-params ([state key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 259, :end-line 259, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state key])), :doc "Given state and ref handle, returns React component"}, static {:name rum.core/static, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :line 273, :column 1, :end-line 273, :end-column 12, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 273, :column 6, :end-line 273, :end-column 12}, :doc "Mixin. Will avoid re-render if none of component’s arguments have changed.\n   Does equality check (=) on all arguments"}, cursor {:protocol-inline nil, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 406, :column 7, :end-line 406, :end-column 13, :arglists (quote ([ref key & options])), :doc "Same as `rum.core/cursor-in` but accepts single key instead of path vector", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref key options)], :arglists ([ref key & options]), :arglists-meta (nil)}}, :name rum.core/cursor, :variadic true, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref key options)], :arglists ([ref key & options]), :arglists-meta (nil)}, :method-params [(ref key options)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 406, :end-line 406, :max-fixed-arity 2, :fn-var true, :arglists ([ref key & options]), :doc "Same as `rum.core/cursor-in` but accepts single key instead of path vector"}, state {:protocol-inline nil, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 14, :column 7, :end-line 14, :end-column 12, :arglists (quote ([comp])), :doc "Given React component, returns Rum state associated with it"}, :name rum.core/state, :variadic false, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :end-column 12, :method-params ([comp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([comp])), :doc "Given React component, returns Rum state associated with it"}, cursor-in {:protocol-inline nil, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 386, :column 7, :end-line 386, :end-column 16, :arglists (quote ([ref path & {:as options}])), :doc "Given atom with deep nested value and path inside it, creates an atom-like structure\n   that can be used separately from main atom, but will sync changes both ways:\n  \n     (def db (atom { :users { \"Ivan\" { :age 30 }}}))\n     (def ivan (rum/cursor db [:users \"Ivan\"]))\n     \\@ivan ;; => { :age 30 }\n     (swap! ivan update :age inc) ;; => { :age 31 }\n     \\@db ;; => { :users { \"Ivan\" { :age 31 }}}\n     (swap! db update-in [:users \"Ivan\" :age] inc) ;; => { :users { \"Ivan\" { :age 32 }}}\n     \\@ivan ;; => { :age 32 }\n  \n  Returned value supports deref, swap!, reset!, watches and metadata.\n  The only supported option is `:meta`", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref path {:as options})], :arglists ([ref path & {:as options}]), :arglists-meta (nil)}}, :name rum.core/cursor-in, :variadic true, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(ref path {:as options})], :arglists ([ref path & {:as options}]), :arglists-meta (nil)}, :method-params [(ref path {:as options})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 386, :end-line 386, :max-fixed-arity 2, :fn-var true, :arglists ([ref path & {:as options}]), :doc "Given atom with deep nested value and path inside it, creates an atom-like structure\n   that can be used separately from main atom, but will sync changes both ways:\n  \n     (def db (atom { :users { \"Ivan\" { :age 30 }}}))\n     (def ivan (rum/cursor db [:users \"Ivan\"]))\n     \\@ivan ;; => { :age 30 }\n     (swap! ivan update :age inc) ;; => { :age 31 }\n     \\@db ;; => { :users { \"Ivan\" { :age 31 }}}\n     (swap! db update-in [:users \"Ivan\" :age] inc) ;; => { :users { \"Ivan\" { :age 32 }}}\n     \\@ivan ;; => { :age 32 }\n  \n  Returned value supports deref, swap!, reset!, watches and metadata.\n  The only supported option is `:meta`"}, dom-node {:protocol-inline nil, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 253, :column 7, :end-line 253, :end-column 15, :arglists (quote ([state])), :doc "Given state, returns top-level DOM node. Can’t be called during render"}, :name rum.core/dom-node, :variadic false, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :end-column 15, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 253, :end-line 253, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :doc "Given state, returns top-level DOM node. Can’t be called during render"}, batch {:name rum.core/batch, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :line 184, :column 1, :end-line 184, :end-column 21, :private true, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 184, :column 16, :end-line 184, :end-column 21, :private true}}, with-ref {:protocol-inline nil, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 247, :column 7, :end-line 247, :end-column 15, :arglists (quote ([component ref])), :doc "Adds React ref (string or callback) to component"}, :name rum.core/with-ref, :variadic false, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :end-column 15, :method-params ([component ref]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 247, :end-line 247, :max-fixed-arity 2, :fn-var true, :arglists (quote ([component ref])), :doc "Adds React ref (string or callback) to component"}, build-defc {:protocol-inline nil, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 151, :column 7, :end-line 151, :end-column 17, :arglists (quote ([render-body mixins display-name]))}, :name rum.core/build-defc, :variadic false, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :end-column 17, :method-params ([render-body mixins display-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 3, :fn-var true, :arglists (quote ([render-body mixins display-name]))}, hydrate {:protocol-inline nil, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 227, :column 7, :end-line 227, :end-column 14, :arglists (quote ([component node])), :doc "Hydrates server rendered DOM tree with provided component."}, :name rum.core/hydrate, :variadic false, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :end-column 14, :method-params ([component node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 227, :end-line 227, :max-fixed-arity 2, :fn-var true, :arglists (quote ([component node])), :doc "Hydrates server rendered DOM tree with provided component."}, build-defcc {:protocol-inline nil, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 168, :column 7, :end-line 168, :end-column 18, :arglists (quote ([render-body mixins display-name]))}, :name rum.core/build-defcc, :variadic false, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :end-column 18, :method-params ([render-body mixins display-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 168, :end-line 168, :max-fixed-arity 3, :fn-var true, :arglists (quote ([render-body mixins display-name]))}, derived-atom {:name rum.core/derived-atom, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :line 347, :column 1, :end-line 347, :end-column 37, :style/indent 2, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 347, :column 25, :end-line 347, :end-column 37, :style/indent 2}, :doc "Use this to create “chains” and acyclic graphs of dependent atoms.\n   `derived-atom` will:\n    - Take N “source” refs\n    - Set up a watch on each of them\n    - Create “sink” atom\n    - When any of source refs changes:\n       - re-run function `f`, passing N dereferenced values of source refs\n       - `reset!` result of `f` to the sink atom\n    - return sink atom\n\n    (def *a (atom 0))\n    (def *b (atom 1))\n    (def *x (derived-atom [*a *b] ::key\n              (fn [a b]\n                (str a \":\" b))))\n    (type *x) ;; => clojure.lang.Atom\n    \\@*x     ;; => 0:1\n    (swap! *a inc)\n    \\@*x     ;; => 1:1\n    (reset! *b 7)\n    \\@*x     ;; => 1:7\n\n   Arguments:\n     refs - sequence of source refs\n     key  - unique key to register watcher, see `clojure.core/add-watch`\n     f    - function that must accept N arguments (same as number of source refs)\n            and return a value to be written to the sink ref.\n            Note: `f` will be called with already dereferenced values\n     opts - optional. Map of:\n       :ref           - Use this as sink ref. By default creates new atom\n       :check-equals? - Do an equality check on each update: `(= @sink (f new-vals))`.\n                        If result of `f` is equal to the old one, do not call `reset!`.\n                        Defaults to `true`. Set to false if calling `=` would be expensive"}, render {:protocol-inline nil, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 200, :column 8, :end-line 200, :end-column 14, :private true, :arglists (quote ([]))}, :private true, :name rum.core/render, :variadic false, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 200, :end-line 200, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, empty-queue {:name rum.core/empty-queue, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :line 190, :column 1, :end-line 190, :end-column 27, :private true, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 190, :column 16, :end-line 190, :end-column 27, :private true}}, build-class {:protocol-inline nil, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 26, :column 8, :end-line 26, :end-column 19, :private true, :arglists (quote ([render mixins display-name]))}, :private true, :name rum.core/build-class, :variadic false, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :end-column 19, :method-params ([render mixins display-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 3, :fn-var true, :arglists (quote ([render mixins display-name]))}, build-ctor {:protocol-inline nil, :meta {:file "/Users/nolastowe/code/practice/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/core.cljs", :line 137, :column 8, :end-line 137, :end-column 18, :private true, :arglists (quote ([render mixins display-name]))}, :private true, :name rum.core/build-ctor, :variadic false, :file "resources/public/js/compiled/devcards_out/rum/core.cljs", :end-column 18, :method-params ([render mixins display-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 3, :fn-var true, :arglists (quote ([render mixins display-name]))}}, :require-macros {rum.core rum.core, sablono.core sablono.core}, :cljs.analyzer/constants {:seen #{:rum/react-component :did-mount :will-unmount :meta :did-remount :rum/class :init :did-catch :child-context :rum.reactive/key :rum/args :before-render :did-update :key-fn :will-mount :rum/component-stack :will-update :class-properties :rum/local :after-render :static-properties :wrap-render :rum.reactive/refs :should-update}, :order [:init :will-mount :before-render :wrap-render :did-mount :after-render :did-remount :should-update :will-update :did-update :did-catch :will-unmount :child-context :class-properties :static-properties :rum/react-component :rum/component-stack :key-fn :rum/args :rum/class :rum/local :rum.reactive/key :rum.reactive/refs :meta]}, :doc nil}