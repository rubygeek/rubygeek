{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name rum.cursor, :imports nil, :requires nil, :uses nil, :defs {Cursor {:num-fields 3, :protocols #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash rum.cursor/Object cljs.core/IReset cljs.core/ISwap cljs.core/IMeta cljs.core/IDeref cljs.core/IPrintWithWriter}, :name rum.cursor/Cursor, :file "resources/public/js/compiled/devcards_out/rum/cursor.cljs", :end-column 16, :type true, :column 10, :line 4, :record false, :end-line 4, :skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IReset cljs.core/ISwap cljs.core/IMeta cljs.core/IDeref cljs.core/IPrintWithWriter}}, ->Cursor {:protocol-inline nil, :meta {:file "/Users/nostowe/personal/rubygeek/clojure/try-devcards-rum/resources/public/js/compiled/devcards_out/rum/cursor.cljs", :line 4, :column 10, :end-line 4, :end-column 16, :protocols #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash rum.cursor/Object cljs.core/IReset cljs.core/ISwap cljs.core/IMeta cljs.core/IDeref cljs.core/IPrintWithWriter}, :skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IReset cljs.core/ISwap cljs.core/IMeta cljs.core/IDeref cljs.core/IPrintWithWriter}, :factory :positional, :arglists (quote ([ref path meta]))}, :protocols #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash rum.cursor/Object cljs.core/IReset cljs.core/ISwap cljs.core/IMeta cljs.core/IDeref cljs.core/IPrintWithWriter}, :name rum.cursor/->Cursor, :variadic false, :file "resources/public/js/compiled/devcards_out/rum/cursor.cljs", :end-column 16, :method-params ([ref path meta]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 4, :end-line 4, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ref path meta])), :skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IReset cljs.core/ISwap cljs.core/IMeta cljs.core/IDeref cljs.core/IPrintWithWriter}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{path meta :val ref}, :order [:val ref path meta]}, :doc nil}