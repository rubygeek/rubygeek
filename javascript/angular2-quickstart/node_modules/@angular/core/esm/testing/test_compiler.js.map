{"version":3,"file":"test_compiler.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/testing/test_compiler.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAC,QAAQ,EAAmI,MAAM,UAAU;OAC5J,EAAC,aAAa,EAAC,MAAM,0BAA0B;AAItD;;;;GAIG;AACH,qCAAqC,QAAQ;IAC3C,IAAI,QAAQ,KAAe,MAAM,aAAa,EAAE,CAAC,CAAC,CAAC;IACnD,cAAc,CAAC,MAAyB,EAAE,SAAiD;QAEzF,MAAM,aAAa,EAAE,CAAC;IACxB,CAAC;IACD,iBAAiB,CACb,SAA4B,EAAE,SAAkD;QAClF,MAAM,aAAa,EAAE,CAAC;IACxB,CAAC;IACD,iBAAiB,CACb,SAA4B,EAAE,SAAkD;QAClF,MAAM,aAAa,EAAE,CAAC;IACxB,CAAC;IACD,YAAY,CAAC,SAA4B,EAAE,SAA6C;QACtF,MAAM,aAAa,EAAE,CAAC;IACxB,CAAC;AACH,CAAC;AAED;;;;GAIG;AACH;AAEA,CAAC;AAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Compiler, CompilerOptions, ComponentMetadataType, DirectiveMetadataType, Injector, NgModuleFactory, NgModuleMetadataType, PipeMetadataType} from '../index';\nimport {unimplemented} from '../src/facade/exceptions';\nimport {ConcreteType} from '../src/facade/lang';\nimport {MetadataOverride} from './metadata_override';\n\n/**\n * Special interface to the compiler only used by testing\n *\n * @experimental\n */\nexport class TestingCompiler extends Compiler {\n  get injector(): Injector { throw unimplemented(); }\n  overrideModule(module: ConcreteType<any>, overrides: MetadataOverride<NgModuleMetadataType>):\n      void {\n    throw unimplemented();\n  }\n  overrideDirective(\n      directive: ConcreteType<any>, overrides: MetadataOverride<DirectiveMetadataType>): void {\n    throw unimplemented();\n  }\n  overrideComponent(\n      component: ConcreteType<any>, overrides: MetadataOverride<ComponentMetadataType>): void {\n    throw unimplemented();\n  }\n  overridePipe(directive: ConcreteType<any>, overrides: MetadataOverride<PipeMetadataType>): void {\n    throw unimplemented();\n  }\n}\n\n/**\n * A factory for creating a Compiler\n *\n * @experimental\n */\nexport abstract class TestingCompilerFactory {\n  abstract createTestingCompiler(options?: CompilerOptions[]): TestingCompiler;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}