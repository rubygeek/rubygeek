{"version":3,"file":"fake_async.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/testing/fake_async.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAC,aAAa,EAAC,MAAM,UAAU;AAEtC,IAAI,0BAA0B,GAAI,IAA8B,CAAC,uBAAuB,CAAC,CAAC;AAE1F,IAAI,cAAc,GAAS,IAAI,CAAC;AAChC,IAAI,sBAAsB,GAAQ,IAAI,CAAC;AAEvC;;;;;GAKG;AACH;IACE,cAAc,GAAG,IAAI,CAAC;IACtB,sBAAsB,GAAG,IAAI,CAAC;AAChC,CAAC;AAED,IAAI,gBAAgB,GAAG,KAAK,CAAC;AAE7B;;;;;;;;;;;;;;;;;GAiBG;AACH,0BAA0B,EAAY;IACpC,MAAM,CAAC,UAAS,GAAG,IAAW,CAAC,iBAAiB;QAC9C,EAAE,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;YACrB,MAAM,IAAI,aAAa,CAAC,qCAAqC,CAAC,CAAC;QACjE,CAAC;QACD,gBAAgB,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC;YACH,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;gBACpB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;oBACtD,MAAM,IAAI,aAAa,CAAC,qCAAqC,CAAC,CAAC;gBACjE,CAAC;gBAED,sBAAsB,GAAG,IAAI,0BAA0B,EAAE,CAAC;gBAC1D,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;YAC7D,CAAC;YAED,IAAI,GAAG,GAAG,cAAc,CAAC,GAAG,CAAC;gBAC3B,IAAI,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;gBACtB,eAAe,EAAE,CAAC;gBAClB,MAAM,CAAC,GAAG,CAAC;YACb,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,CAAC,sBAAsB,CAAC,qBAAqB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC5D,MAAM,IAAI,aAAa,CACnB,GAAG,sBAAsB,CAAC,qBAAqB,CAAC,MAAM,GAAG;oBACzD,uCAAuC,CAAC,CAAC;YAC/C,CAAC;YAED,EAAE,CAAC,CAAC,sBAAsB,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACpD,MAAM,IAAI,aAAa,CACnB,GAAG,sBAAsB,CAAC,aAAa,CAAC,MAAM,+BAA+B,CAAC,CAAC;YACrF,CAAC;YACD,MAAM,CAAC,GAAG,CAAC;QACb,CAAC;gBAAS,CAAC;YACT,gBAAgB,GAAG,KAAK,CAAC;QAC3B,CAAC;IACH,CAAC,CAAC;AACJ,CAAC;AAED;IACE,EAAE,CAAC,CAAC,sBAAsB,IAAI,IAAI,CAAC,CAAC,CAAC;QACnC,MAAM,IAAI,KAAK,CAAC,wEAAwE,CAAC,CAAC;IAC5F,CAAC;IACD,MAAM,CAAC,sBAAsB,CAAC;AAChC,CAAC;AAED;;;;;;;;;;;GAWG;AACH,qBAAqB,MAAM,GAAW,CAAC;IACrC,qBAAqB,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACvC,CAAC;AAED;;;;GAIG;AACH;IACE,IAAI,QAAQ,GAAG,qBAAqB,EAAE,CAAC;IACvC,IAAI,aAAa,GAAG,QAAQ,CAAC,qBAAqB,CAAC;IACnD,QAAQ,CAAC,qBAAqB,CAAC,MAAM,GAAG,CAAC,CAAC;AAC5C,CAAC;AAED;;;;GAIG;AACH;IACE,qBAAqB,EAAE,CAAC,eAAe,EAAE,CAAC;AAC5C,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BaseException} from '../index';\n\nlet _FakeAsyncTestZoneSpecType = (Zone as any /** TODO #9100 */)['FakeAsyncTestZoneSpec'];\n\nlet _fakeAsyncZone: Zone = null;\nlet _fakeAsyncTestZoneSpec: any = null;\n\n/**\n * Clears out the shared fake async zone for a test.\n * To be called in a global `beforeEach`.\n *\n * @experimental\n */\nexport function resetFakeAsyncZone() {\n  _fakeAsyncZone = null;\n  _fakeAsyncTestZoneSpec = null;\n}\n\nlet _inFakeAsyncCall = false;\n\n/**\n * Wraps a function to be executed in the fakeAsync zone:\n * - microtasks are manually executed by calling `flushMicrotasks()`,\n * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n *\n * If there are any pending timers at the end of the function, an exception will be thrown.\n *\n * Can be used to wrap inject() calls.\n *\n * ## Example\n *\n * {@example testing/ts/fake_async.ts region='basic'}\n *\n * @param fn\n * @returns {Function} The function wrapped to be executed in the fakeAsync zone\n *\n * @experimental\n */\nexport function fakeAsync(fn: Function): (...args: any[]) => any {\n  return function(...args: any[] /** TODO #9100 */) {\n    if (_inFakeAsyncCall) {\n      throw new BaseException('fakeAsync() calls can not be nested');\n    }\n    _inFakeAsyncCall = true;\n    try {\n      if (!_fakeAsyncZone) {\n        if (Zone.current.get('FakeAsyncTestZoneSpec') != null) {\n          throw new BaseException('fakeAsync() calls can not be nested');\n        }\n\n        _fakeAsyncTestZoneSpec = new _FakeAsyncTestZoneSpecType();\n        _fakeAsyncZone = Zone.current.fork(_fakeAsyncTestZoneSpec);\n      }\n\n      let res = _fakeAsyncZone.run(() => {\n        let res = fn(...args);\n        flushMicrotasks();\n        return res;\n      });\n\n      if (_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length > 0) {\n        throw new BaseException(\n            `${_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length} ` +\n            `periodic timer(s) still in the queue.`);\n      }\n\n      if (_fakeAsyncTestZoneSpec.pendingTimers.length > 0) {\n        throw new BaseException(\n            `${_fakeAsyncTestZoneSpec.pendingTimers.length} timer(s) still in the queue.`);\n      }\n      return res;\n    } finally {\n      _inFakeAsyncCall = false;\n    }\n  };\n}\n\nfunction _getFakeAsyncZoneSpec(): any {\n  if (_fakeAsyncTestZoneSpec == null) {\n    throw new Error('The code should be running in the fakeAsync zone to call this function');\n  }\n  return _fakeAsyncTestZoneSpec;\n}\n\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n *\n * The microtasks queue is drained at the very start of this function and after any timer callback\n * has been executed.\n *\n * ## Example\n *\n * {@example testing/ts/fake_async.ts region='basic'}\n *\n * @experimental\n */\nexport function tick(millis: number = 0): void {\n  _getFakeAsyncZoneSpec().tick(millis);\n}\n\n/**\n * Discard all remaining periodic tasks.\n *\n * @experimental\n */\nexport function discardPeriodicTasks(): void {\n  let zoneSpec = _getFakeAsyncZoneSpec();\n  let pendingTimers = zoneSpec.pendingPeriodicTimers;\n  zoneSpec.pendingPeriodicTimers.length = 0;\n}\n\n/**\n * Flush any pending microtasks.\n *\n * @experimental\n */\nexport function flushMicrotasks(): void {\n  _getFakeAsyncZoneSpec().flushMicrotasks();\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}