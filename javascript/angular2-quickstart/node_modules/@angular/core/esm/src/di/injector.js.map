{"version":3,"file":"injector.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/di/injector.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAC,aAAa,EAAE,aAAa,EAAC,MAAM,sBAAsB;OAC1D,EAAC,SAAS,EAAC,MAAM,gBAAgB;AAExC,MAAM,mBAAmB,GAAG,IAAI,MAAM,EAAE,CAAC;AACzC,OAAO,MAAM,kBAAkB,GAAG,mBAAmB,CAAC;AAEtD;IACE,GAAG,CAAC,KAAU,EAAE,aAAa,GAAQ,mBAAmB;QACtD,EAAE,CAAC,CAAC,aAAa,KAAK,mBAAmB,CAAC,CAAC,CAAC;YAC1C,MAAM,IAAI,aAAa,CAAC,mBAAmB,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAClE,CAAC;QACD,MAAM,CAAC,aAAa,CAAC;IACvB,CAAC;AACH,CAAC;AAED;;GAEG;AACH;IAIE;;;;;;;;;;;;;;;;;;;;;;;OAuBG;IACH,GAAG,CAAC,KAAU,EAAE,aAAmB,IAAS,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;AACvE,CAAC;AA5BQ,2BAAkB,GAAG,mBAAmB,CAAC;AACzC,aAAI,GAAa,IAAI,aAAa,EAAE,CA2B5C","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BaseException, unimplemented} from '../facade/exceptions';\nimport {stringify} from '../facade/lang';\n\nconst _THROW_IF_NOT_FOUND = new Object();\nexport const THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n\nclass _NullInjector implements Injector {\n  get(token: any, notFoundValue: any = _THROW_IF_NOT_FOUND): any {\n    if (notFoundValue === _THROW_IF_NOT_FOUND) {\n      throw new BaseException(`No provider for ${stringify(token)}!`);\n    }\n    return notFoundValue;\n  }\n}\n\n/**\n * @stable\n */\nexport abstract class Injector {\n  static THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n  static NULL: Injector = new _NullInjector();\n\n  /**\n   * Retrieves an instance from the injector based on the provided token.\n   * If not found:\n   * - Throws {@link NoProviderError} if no `notFoundValue` that is not equal to\n   * Injector.THROW_IF_NOT_FOUND is given\n   * - Returns the `notFoundValue` otherwise\n   *\n   * ### Example ([live demo](http://plnkr.co/edit/HeXSHg?p=preview))\n   *\n   * ```typescript\n   * var injector = ReflectiveInjector.resolveAndCreate([\n   *   {provide: \"validToken\", useValue: \"Value\"}\n   * ]);\n   * expect(injector.get(\"validToken\")).toEqual(\"Value\");\n   * expect(() => injector.get(\"invalidToken\")).toThrowError();\n   * ```\n   *\n   * `Injector` returns itself when given `Injector` as a token.\n   *\n   * ```typescript\n   * var injector = ReflectiveInjector.resolveAndCreate([]);\n   * expect(injector.get(Injector)).toBe(injector);\n   * ```\n   */\n  get(token: any, notFoundValue?: any): any { return unimplemented(); }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}