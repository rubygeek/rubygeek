{"version":3,"file":"application_ref.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/application_ref.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ListWrapper} from '../src/facade/collection';\nimport {BaseException, ExceptionHandler, unimplemented} from '../src/facade/exceptions';\nimport {ConcreteType, Type, isBlank, isPresent, isPromise, stringify} from '../src/facade/lang';\n\nimport {ApplicationInitStatus} from './application_init';\nimport {APP_BOOTSTRAP_LISTENER, PLATFORM_INITIALIZER} from './application_tokens';\nimport {ChangeDetectorRef} from './change_detection/change_detector_ref';\nimport {Console} from './console';\nimport {Inject, Injectable, Injector, OpaqueToken, Optional, ReflectiveInjector, SkipSelf, forwardRef} from './di';\nimport {Compiler, CompilerFactory, CompilerOptions} from './linker/compiler';\nimport {ComponentFactory, ComponentRef} from './linker/component_factory';\nimport {ComponentFactoryResolver} from './linker/component_factory_resolver';\nimport {ComponentResolver} from './linker/component_resolver';\nimport {NgModuleFactory, NgModuleInjector, NgModuleRef} from './linker/ng_module_factory';\nimport {WtfScopeFn, wtfCreateScope, wtfLeave} from './profile/profile';\nimport {Testability, TestabilityRegistry} from './testability/testability';\nimport {NgZone, NgZoneError} from './zone/ng_zone';\n\nvar _devMode: boolean = true;\nvar _runModeLocked: boolean = false;\nvar _platform: PlatformRef;\n\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n *\n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport function enableProdMode(): void {\n  if (_runModeLocked) {\n    // Cannot use BaseException as that ends up importing from facade/lang.\n    throw new BaseException('Cannot enable prod mode after platform setup.');\n  }\n  _devMode = false;\n}\n\n/**\n * Locks the run mode of Angular. After this has been called,\n * it can't be changed any more. I.e. `isDevMode()` will always\n * return the same value.\n *\n * @deprecated This is a noop now. {@link isDevMode} automatically locks the run mode on first call.\n */\nexport function lockRunMode(): void {\n  console.warn('lockRunMode() is deprecated and not needed any more.');\n}\n\n/**\n * Returns whether Angular is in development mode. After called once,\n * the value is locked and won't change any more.\n *\n * By default, this is true, unless a user calls `enableProdMode` before calling this.\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport function isDevMode(): boolean {\n  _runModeLocked = true;\n  return _devMode;\n}\n\n/**\n * Creates a platform.\n * Platforms have to be eagerly created via this function.\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport function createPlatform(injector: Injector): PlatformRef {\n  if (isPresent(_platform) && !_platform.disposed) {\n    throw new BaseException(\n        'There can be only one platform. Destroy the previous one to create a new one.');\n  }\n  _platform = injector.get(PlatformRef);\n  const inits: Function[] = <Function[]>injector.get(PLATFORM_INITIALIZER, null);\n  if (isPresent(inits)) inits.forEach(init => init());\n  return _platform;\n}\n\n/**\n * Factory for a platform.\n *\n * @experimental\n */\nexport type PlatformFactory = (extraProviders?: any[]) => PlatformRef;\n\n/**\n * Creates a factory for a platform\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport function createPlatformFactory(\n    parentPlaformFactory: PlatformFactory, name: string, providers: any[] = []): PlatformFactory {\n  const marker = new OpaqueToken(`Platform: ${name}`);\n  return (extraProviders: any[] = []) => {\n    if (!getPlatform()) {\n      if (parentPlaformFactory) {\n        parentPlaformFactory(\n            providers.concat(extraProviders).concat({provide: marker, useValue: true}));\n      } else {\n        createPlatform(ReflectiveInjector.resolveAndCreate(\n            providers.concat(extraProviders).concat({provide: marker, useValue: true})));\n      }\n    }\n    return assertPlatform(marker);\n  };\n}\n\n/**\n * Checks that there currently is a platform\n * which contains the given token as a provider.\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport function assertPlatform(requiredToken: any): PlatformRef {\n  var platform = getPlatform();\n  if (isBlank(platform)) {\n    throw new BaseException('No platform exists!');\n  }\n  if (isPresent(platform) && isBlank(platform.injector.get(requiredToken, null))) {\n    throw new BaseException(\n        'A platform with a different configuration has been created. Please destroy it first.');\n  }\n  return platform;\n}\n\n/**\n * Dispose the existing platform.\n *\n * @deprecated Use `destroyPlatform` instead\n */\nexport function disposePlatform(): void {\n  destroyPlatform();\n}\n\n/**\n * Destroy the existing platform.\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport function destroyPlatform(): void {\n  if (isPresent(_platform) && !_platform.destroyed) {\n    _platform.destroy();\n  }\n}\n\n/**\n * Returns the current platform.\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport function getPlatform(): PlatformRef {\n  return isPresent(_platform) && !_platform.disposed ? _platform : null;\n}\n\n/**\n * Shortcut for ApplicationRef.bootstrap.\n * Requires a platform to be created first.\n *\n * @deprecated Use {@link bootstrapModuleFactory} instead.\n */\nexport function coreBootstrap<C>(\n    componentFactory: ComponentFactory<C>, injector: Injector): ComponentRef<C> {\n  throw new BaseException('coreBootstrap is deprecated. Use bootstrapModuleFactory instead.');\n}\n\n/**\n * Resolves the componentFactory for the given component,\n * waits for asynchronous initializers and bootstraps the component.\n * Requires a platform to be created first.\n *\n * @deprecated Use {@link bootstrapModule} instead.\n */\nexport function coreLoadAndBootstrap(\n    componentType: Type, injector: Injector): Promise<ComponentRef<any>> {\n  throw new BaseException('coreLoadAndBootstrap is deprecated. Use bootstrapModule instead.');\n}\n\n/**\n * The Angular platform is the entry point for Angular on a web page. Each page\n * has exactly one platform, and services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n *\n * A page's platform is initialized implicitly when {@link bootstrap}() is called, or\n * explicitly by calling {@link createPlatform}().\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport abstract class PlatformRef {\n  /**\n   * Creates an instance of an `@NgModule` for the given platform\n   * for offline compilation.\n   *\n   * ## Simple Example\n   *\n   * ```typescript\n   * my_module.ts:\n   *\n   * @NgModule({\n   *   imports: [BrowserModule]\n   * })\n   * class MyModule {}\n   *\n   * main.ts:\n   * import {MyModuleNgFactory} from './my_module.ngfactory';\n   * import {browserPlatform} from '@angular/platform-browser';\n   *\n   * let moduleRef = browserPlatform().bootstrapModuleFactory(MyModuleNgFactory);\n   * ```\n   *\n   * @experimental APIs related to application bootstrap are currently under review.\n   */\n  bootstrapModuleFactory<M>(moduleFactory: NgModuleFactory<M>): Promise<NgModuleRef<M>> {\n    throw unimplemented();\n  }\n\n  /**\n   * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.\n   *\n   * ## Simple Example\n   *\n   * ```typescript\n   * @NgModule({\n   *   imports: [BrowserModule]\n   * })\n   * class MyModule {}\n   *\n   * let moduleRef = browserPlatform().bootstrapModule(MyModule);\n   * ```\n   * @stable\n   */\n  bootstrapModule<M>(\n      moduleType: ConcreteType<M>,\n      compilerOptions: CompilerOptions|CompilerOptions[] = []): Promise<NgModuleRef<M>> {\n    throw unimplemented();\n  }\n\n  /**\n   * Register a listener to be called when the platform is disposed.\n   * @deprecated Use `OnDestroy` instead\n   */\n  abstract registerDisposeListener(dispose: () => void): void;\n\n  /**\n   * Register a listener to be called when the platform is disposed.\n   */\n  abstract onDestroy(callback: () => void): void;\n\n  /**\n   * Retrieve the platform {@link Injector}, which is the parent injector for\n   * every Angular application on the page and provides singleton providers.\n   */\n  get injector(): Injector { throw unimplemented(); };\n\n  /**\n   * Destroy the Angular platform and all Angular applications on the page.\n   * @deprecated Use `destroy` instead\n   */\n  abstract dispose(): void;\n\n  /**\n   * Destroy the Angular platform and all Angular applications on the page.\n   */\n  abstract destroy(): void;\n\n  /**\n   * @deprecated Use `destroyed` instead\n   */\n  get disposed(): boolean { throw unimplemented(); }\n  get destroyed(): boolean { throw unimplemented(); }\n}\n\nfunction _callAndReportToExceptionHandler(\n    exceptionHandler: ExceptionHandler, callback: () => any): any {\n  try {\n    const result = callback();\n    if (isPromise(result)) {\n      return result.catch((e: any) => {\n        exceptionHandler.call(e);\n        // rethrow as the exception handler might not do it\n        throw e;\n      });\n    } else {\n      return result;\n    }\n  } catch (e) {\n    exceptionHandler.call(e);\n    // rethrow as the exception handler might not do it\n    throw e;\n  }\n}\nexport class PlatformRef_ extends PlatformRef {\n  private _modules: NgModuleRef<any>[] = [];\n  private _destroyListeners: Function[] = [];\n\n  private _destroyed: boolean = false;\n\n  constructor(private _injector: Injector) { super(); }\n\n  /**\n   * @deprecated\n   */\n  registerDisposeListener(dispose: () => void): void { this.onDestroy(dispose); }\n\n  onDestroy(callback: () => void): void { this._destroyListeners.push(callback); }\n\n  get injector(): Injector { return this._injector; }\n\n  /**\n   * @deprecated\n   */\n  get disposed() { return this.destroyed; }\n  get destroyed() { return this._destroyed; }\n\n  destroy() {\n    if (this._destroyed) {\n      throw new BaseException('The platform has already been destroyed!');\n    }\n    ListWrapper.clone(this._modules).forEach((app) => app.destroy());\n    this._destroyListeners.forEach((dispose) => dispose());\n    this._destroyed = true;\n  }\n\n  /**\n   * @deprecated\n   */\n  dispose(): void { this.destroy(); }\n\n  bootstrapModuleFactory<M>(moduleFactory: NgModuleFactory<M>): Promise<NgModuleRef<M>> {\n    return this._bootstrapModuleFactoryWithZone(moduleFactory, null);\n  }\n\n  private _bootstrapModuleFactoryWithZone<M>(moduleFactory: NgModuleFactory<M>, ngZone: NgZone):\n      Promise<NgModuleRef<M>> {\n    // Note: We need to create the NgZone _before_ we instantiate the module,\n    // as instantiating the module creates some providers eagerly.\n    // So we create a mini parent injector that just contains the new NgZone and\n    // pass that as parent to the NgModuleFactory.\n    if (!ngZone) ngZone = new NgZone({enableLongStackTrace: isDevMode()});\n    // Attention: Don't use ApplicationRef.run here,\n    // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n    return ngZone.run(() => {\n      const ngZoneInjector =\n          ReflectiveInjector.resolveAndCreate([{provide: NgZone, useValue: ngZone}], this.injector);\n      const moduleRef = <NgModuleInjector<M>>moduleFactory.create(ngZoneInjector);\n      const exceptionHandler: ExceptionHandler = moduleRef.injector.get(ExceptionHandler, null);\n      if (!exceptionHandler) {\n        throw new Error('No ExceptionHandler. Is platform module (BrowserModule) included?');\n      }\n      moduleRef.onDestroy(() => ListWrapper.remove(this._modules, moduleRef));\n      ngZone.onError.subscribe({\n        next: (error: NgZoneError) => { exceptionHandler.call(error.error, error.stackTrace); }\n      });\n      return _callAndReportToExceptionHandler(exceptionHandler, () => {\n        const initStatus: ApplicationInitStatus = moduleRef.injector.get(ApplicationInitStatus);\n        return initStatus.donePromise.then(() => {\n          this._moduleDoBootstrap(moduleRef);\n          return moduleRef;\n        });\n      });\n    });\n  }\n\n  bootstrapModule<M>(\n      moduleType: ConcreteType<M>,\n      compilerOptions: CompilerOptions|CompilerOptions[] = []): Promise<NgModuleRef<M>> {\n    return this._bootstrapModuleWithZone(moduleType, compilerOptions, null);\n  }\n\n  private _bootstrapModuleWithZone<M>(\n      moduleType: ConcreteType<M>, compilerOptions: CompilerOptions|CompilerOptions[] = [],\n      ngZone: NgZone): Promise<NgModuleRef<M>> {\n    const compilerFactory: CompilerFactory = this.injector.get(CompilerFactory);\n    const compiler = compilerFactory.createCompiler(\n        compilerOptions instanceof Array ? compilerOptions : [compilerOptions]);\n    return compiler.compileModuleAsync(moduleType)\n        .then((moduleFactory) => this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone));\n  }\n\n  private _moduleDoBootstrap(moduleRef: NgModuleInjector<any>) {\n    const appRef = moduleRef.injector.get(ApplicationRef);\n    if (moduleRef.bootstrapFactories.length > 0) {\n      moduleRef.bootstrapFactories.forEach((compFactory) => appRef.bootstrap(compFactory));\n    } else if (moduleRef.instance.ngDoBootstrap) {\n      moduleRef.instance.ngDoBootstrap(appRef);\n    } else {\n      throw new BaseException(\n          `The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ` +\n          `Please define one of these.`);\n    }\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: Injector, },\n];\n}\n\n/**\n * A reference to an Angular application running on a page.\n *\n * For more about Angular applications, see the documentation for {@link bootstrap}.\n *\n * @experimental APIs related to application bootstrap are currently under review.\n */\nexport abstract class ApplicationRef {\n  /**\n   * Register a listener to be called each time `bootstrap()` is called to bootstrap\n   * a new root component.\n   *\n   * @deprecated Provide a callback via a multi provider for {@link APP_BOOTSTRAP_LISTENER}\n   * instead.\n   */\n  abstract registerBootstrapListener(listener: (ref: ComponentRef<any>) => void): void;\n\n  /**\n   * Register a listener to be called when the application is disposed.\n   *\n   * @deprecated Use `ngOnDestroy` lifecycle hook or {@link NgModuleRef}.onDestroy.\n   */\n  abstract registerDisposeListener(dispose: () => void): void;\n\n  /**\n   * Returns a promise that resolves when all asynchronous application initializers\n   * are done.\n   *\n   * @deprecated Use the {@link ApplicationInitStatus} class instead.\n   */\n  abstract waitForAsyncInitializers(): Promise<any>;\n\n  /**\n   * Runs the given callback in the zone and returns the result of the callback.\n   * Exceptions will be forwarded to the ExceptionHandler and rethrown.\n   *\n   * @deprecated Use {@link NgZone}.run instead.\n   */\n  abstract run(callback: Function): any;\n\n  /**\n   * Bootstrap a new component at the root level of the application.\n   *\n   * ### Bootstrap process\n   *\n   * When bootstrapping a new root component into an application, Angular mounts the\n   * specified application component onto DOM elements identified by the [componentType]'s\n   * selector and kicks off automatic change detection to finish initializing the component.\n   *\n   * ### Example\n   * {@example core/ts/platform/platform.ts region='longform'}\n   */\n  abstract bootstrap<C>(componentFactory: ComponentFactory<C>|ConcreteType<C>): ComponentRef<C>;\n\n  /**\n   * Retrieve the application {@link Injector}.\n   *\n   * @deprecated inject an {@link Injector} directly where needed or use {@link\n   * NgModuleRef}.injector.\n   */\n  get injector(): Injector { return <Injector>unimplemented(); };\n\n  /**\n   * Retrieve the application {@link NgZone}.\n   *\n   * @deprecated inject {@link NgZone} instead of calling this getter.\n   */\n  get zone(): NgZone { return <NgZone>unimplemented(); };\n\n  /**\n   * Dispose of this application and all of its components.\n   *\n   * @deprecated Destroy the module that was created during bootstrap instead by calling\n   * {@link NgModuleRef}.destroy.\n   */\n  abstract dispose(): void;\n\n  /**\n   * Invoke this method to explicitly process change detection and its side-effects.\n   *\n   * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n   * further changes are detected. If additional changes are picked up during this second cycle,\n   * bindings in the app have side-effects that cannot be resolved in a single change detection\n   * pass.\n   * In this case, Angular throws an error, since an Angular application can only have one change\n   * detection pass during which all change detection must complete.\n   */\n  abstract tick(): void;\n\n  /**\n   * Get a list of component types registered to this application.\n   * This list is populated even before the component is created.\n   */\n  get componentTypes(): Type[] { return <Type[]>unimplemented(); };\n\n  /**\n   * Get a list of components registered to this application.\n   */\n  get components(): ComponentRef<any>[] { return <ComponentRef<any>[]>unimplemented(); };\n}\nexport class ApplicationRef_ extends ApplicationRef {\n  /** @internal */\n  static _tickScope: WtfScopeFn = wtfCreateScope('ApplicationRef#tick()');\n\n  private _bootstrapListeners: Function[] = [];\n  /**\n   * @deprecated\n   */\n  private _disposeListeners: Function[] = [];\n  private _rootComponents: ComponentRef<any>[] = [];\n  private _rootComponentTypes: Type[] = [];\n  private _changeDetectorRefs: ChangeDetectorRef[] = [];\n  private _runningTick: boolean = false;\n  private _enforceNoNewChanges: boolean = false;\n\n  constructor(\n      private _zone: NgZone, private _console: Console, private _injector: Injector,\n      private _exceptionHandler: ExceptionHandler,\n      private _componentFactoryResolver: ComponentFactoryResolver,\n      private _initStatus: ApplicationInitStatus, private _testabilityRegistry: TestabilityRegistry, private _testability: Testability) {\n    super();\n    this._enforceNoNewChanges = isDevMode();\n\n    this._zone.onMicrotaskEmpty.subscribe(\n        {next: () => { this._zone.run(() => { this.tick(); }); }});\n  }\n\n  /**\n   * @deprecated\n   */\n  registerBootstrapListener(listener: (ref: ComponentRef<any>) => void): void {\n    this._bootstrapListeners.push(listener);\n  }\n\n  /**\n   * @deprecated\n   */\n  registerDisposeListener(dispose: () => void): void { this._disposeListeners.push(dispose); }\n\n  registerChangeDetector(changeDetector: ChangeDetectorRef): void {\n    this._changeDetectorRefs.push(changeDetector);\n  }\n\n  unregisterChangeDetector(changeDetector: ChangeDetectorRef): void {\n    ListWrapper.remove(this._changeDetectorRefs, changeDetector);\n  }\n\n  /**\n   * @deprecated\n   */\n  waitForAsyncInitializers(): Promise<any> { return this._initStatus.donePromise; }\n\n  /**\n   * @deprecated\n   */\n  run(callback: Function): any {\n    return this._zone.run(\n        () => _callAndReportToExceptionHandler(this._exceptionHandler, <any>callback));\n  }\n\n  bootstrap<C>(componentOrFactory: ComponentFactory<C>|ConcreteType<C>): ComponentRef<C> {\n    if (!this._initStatus.done) {\n      throw new BaseException(\n          'Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n    }\n    let componentFactory: ComponentFactory<C>;\n    if (componentOrFactory instanceof ComponentFactory) {\n      componentFactory = componentOrFactory;\n    } else {\n      componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);\n    }\n    this._rootComponentTypes.push(componentFactory.componentType);\n    var compRef = componentFactory.create(this._injector, [], componentFactory.selector);\n    compRef.onDestroy(() => { this._unloadComponent(compRef); });\n    var testability = compRef.injector.get(Testability, null);\n    if (isPresent(testability)) {\n      compRef.injector.get(TestabilityRegistry)\n          .registerApplication(compRef.location.nativeElement, testability);\n    }\n\n    this._loadComponent(compRef);\n    if (isDevMode()) {\n      this._console.log(\n          `Angular 2 is running in the development mode. Call enableProdMode() to enable the production mode.`);\n    }\n    return compRef;\n  }\n\n  /** @internal */\n  _loadComponent(componentRef: ComponentRef<any>): void {\n    this._changeDetectorRefs.push(componentRef.changeDetectorRef);\n    this.tick();\n    this._rootComponents.push(componentRef);\n    // Get the listeners lazily to prevent DI cycles.\n    const listeners =\n        <((compRef: ComponentRef<any>) => void)[]>this._injector.get(APP_BOOTSTRAP_LISTENER, [])\n            .concat(this._bootstrapListeners);\n    listeners.forEach((listener) => listener(componentRef));\n  }\n\n  /** @internal */\n  _unloadComponent(componentRef: ComponentRef<any>): void {\n    if (!ListWrapper.contains(this._rootComponents, componentRef)) {\n      return;\n    }\n    this.unregisterChangeDetector(componentRef.changeDetectorRef);\n    ListWrapper.remove(this._rootComponents, componentRef);\n  }\n\n  /**\n   * @deprecated\n   */\n  get injector(): Injector { return this._injector; }\n\n  /**\n   * @deprecated\n   */\n  get zone(): NgZone { return this._zone; }\n\n  tick(): void {\n    if (this._runningTick) {\n      throw new BaseException('ApplicationRef.tick is called recursively');\n    }\n\n    var s = ApplicationRef_._tickScope();\n    try {\n      this._runningTick = true;\n      this._changeDetectorRefs.forEach((detector) => detector.detectChanges());\n      if (this._enforceNoNewChanges) {\n        this._changeDetectorRefs.forEach((detector) => detector.checkNoChanges());\n      }\n    } finally {\n      this._runningTick = false;\n      wtfLeave(s);\n    }\n  }\n\n  ngOnDestroy() {\n    // TODO(alxhub): Dispose of the NgZone.\n    ListWrapper.clone(this._rootComponents).forEach((ref) => ref.destroy());\n    this._disposeListeners.forEach((dispose) => dispose());\n  }\n\n  /**\n   * @deprecated\n   */\n  dispose(): void { this.ngOnDestroy(); }\n\n  get componentTypes(): Type[] { return this._rootComponentTypes; }\n\n  get components(): ComponentRef<any>[] { return this._rootComponents; }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: NgZone, },\n{type: Console, },\n{type: Injector, },\n{type: ExceptionHandler, },\n{type: ComponentFactoryResolver, },\n{type: ApplicationInitStatus, },\n{type: TestabilityRegistry, decorators: [{ type: Optional }, ]},\n{type: Testability, decorators: [{ type: Optional }, ]},\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}