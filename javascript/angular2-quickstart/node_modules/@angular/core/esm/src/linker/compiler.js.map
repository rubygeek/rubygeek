{"version":3,"file":"compiler.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/linker/compiler.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAW,WAAW,EAAC,MAAM,OAAO;OACpC,EAAC,aAAa,EAAgB,MAAM,sBAAsB;OAC1D,EAAqB,SAAS,EAAC,MAAM,gBAAgB;AAQ5D;;;;GAIG;AACH,gDAAgD,aAAa;IAC3D,YAAmB,QAAc;QAC/B,MAAM,kCAAkC,SAAS,CAAC,QAAQ,CAAC,yBAAyB,CAAC,CAAC;QADrE,aAAQ,GAAR,QAAQ,CAAM;IAEjC,CAAC;AACH,CAAC;AAED;;;;GAIG;AACH;IACE,YACW,eAAmC,EACnC,kBAA2C;QAD3C,oBAAe,GAAf,eAAe,CAAoB;QACnC,uBAAkB,GAAlB,kBAAkB,CAAyB;IAAG,CAAC;AAC5D,CAAC;AAGD;IACE,MAAM,IAAI,aAAa,CAAC,gCAAgC,CAAC,CAAC;AAC5D,CAAC;AAED;;;;;;;;;GASG;AACH;IACE;;OAEG;IACH,qBAAqB,CAAI,SAA0B,EAAE,QAAQ,GAAS,IAAI;QAExE,MAAM,WAAW,EAAE,CAAC;IACtB,CAAC;IACD;;;OAGG;IACH,oBAAoB,CAAI,SAA0B,EAAE,QAAQ,GAAS,IAAI;QACvE,MAAM,WAAW,EAAE,CAAC;IACtB,CAAC;IACD;;;;OAIG;IACH,iBAAiB,CAAI,UAA2B,IAAwB,MAAM,WAAW,EAAE,CAAC,CAAC,CAAC;IAE9F;;OAEG;IACH,kBAAkB,CAAI,UAA2B;QAC/C,MAAM,WAAW,EAAE,CAAC;IACtB,CAAC;IAED;;OAEG;IACH,iCAAiC,CAAI,UAA2B;QAE9D,MAAM,WAAW,EAAE,CAAC;IACtB,CAAC;IAED;;OAEG;IACH,kCAAkC,CAAI,UAA2B;QAE/D,MAAM,WAAW,EAAE,CAAC;IACtB,CAAC;IAED;;OAEG;IACH,UAAU,KAAU,CAAC;IAErB;;OAEG;IACH,aAAa,CAAC,IAAU,IAAG,CAAC;AAC9B,CAAC;AAcD;;;;GAIG;AACH,OAAO,MAAM,gBAAgB,GAAG,IAAI,WAAW,CAAC,iBAAiB,CAAC,CAAC;AAEnE;;;;GAIG;AACH;AAEA,CAAC;AAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector, OpaqueToken} from '../di';\nimport {BaseException, unimplemented} from '../facade/exceptions';\nimport {ConcreteType, Type, stringify} from '../facade/lang';\nimport {NgModuleMetadata, ViewEncapsulation} from '../metadata';\n\nimport {ComponentFactory} from './component_factory';\nimport {ComponentResolver} from './component_resolver';\nimport {NgModuleFactory} from './ng_module_factory';\n\n\n/**\n * Indicates that a component is still being loaded in a synchronous compile.\n *\n * @stable\n */\nexport class ComponentStillLoadingError extends BaseException {\n  constructor(public compType: Type) {\n    super(`Can't compile synchronously as ${stringify(compType)} is still being loaded!`);\n  }\n}\n\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * @experimental\n */\nexport class ModuleWithComponentFactories<T> {\n  constructor(\n      public ngModuleFactory: NgModuleFactory<T>,\n      public componentFactories: ComponentFactory<any>[]) {}\n}\n\n\nfunction _throwError() {\n  throw new BaseException(`Runtime compiler is not loaded`);\n}\n\n/**\n * Low-level service for running the angular compiler duirng runtime\n * to create {@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n * @stable\n */\nexport class Compiler {\n  /**\n   * Loads the template and styles of a component and returns the associated `ComponentFactory`.\n   */\n  compileComponentAsync<T>(component: ConcreteType<T>, ngModule: Type = null):\n      Promise<ComponentFactory<T>> {\n    throw _throwError();\n  }\n  /**\n   * Compiles the given component. All templates have to be either inline or compiled via\n   * `compileComponentAsync` before. Otherwise throws a {@link ComponentStillLoadingError}.\n   */\n  compileComponentSync<T>(component: ConcreteType<T>, ngModule: Type = null): ComponentFactory<T> {\n    throw _throwError();\n  }\n  /**\n   * Compiles the given NgModule and all of its components. All templates of the components listed\n   * in `entryComponents`\n   * have to be inlined. Otherwise throws a {@link ComponentStillLoadingError}.\n   */\n  compileModuleSync<T>(moduleType: ConcreteType<T>): NgModuleFactory<T> { throw _throwError(); }\n\n  /**\n   * Compiles the given NgModule and all of its components\n   */\n  compileModuleAsync<T>(moduleType: ConcreteType<T>): Promise<NgModuleFactory<T>> {\n    throw _throwError();\n  }\n\n  /**\n   * Same as {@link compileModuleSync} put also creates ComponentFactories for all components.\n   */\n  compileModuleAndAllComponentsSync<T>(moduleType: ConcreteType<T>):\n      ModuleWithComponentFactories<T> {\n    throw _throwError();\n  }\n\n  /**\n   * Same as {@link compileModuleAsync} put also creates ComponentFactories for all components.\n   */\n  compileModuleAndAllComponentsAsync<T>(moduleType: ConcreteType<T>):\n      Promise<ModuleWithComponentFactories<T>> {\n    throw _throwError();\n  }\n\n  /**\n   * Clears all caches\n   */\n  clearCache(): void {}\n\n  /**\n   * Clears the cache for the given component/ngModule.\n   */\n  clearCacheFor(type: Type) {}\n}\n\n/**\n * Options for creating a compiler\n *\n * @experimental\n */\nexport type CompilerOptions = {\n  useDebug?: boolean,\n  useJit?: boolean,\n  defaultEncapsulation?: ViewEncapsulation,\n  providers?: any[],\n};\n\n/**\n * Token to provide CompilerOptions in the platform injector.\n *\n * @experimental\n */\nexport const COMPILER_OPTIONS = new OpaqueToken('compilerOptions');\n\n/**\n * A factory for creating a Compiler\n *\n * @experimental\n */\nexport abstract class CompilerFactory {\n  abstract createCompiler(options?: CompilerOptions[]): Compiler;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}