{"version":3,"file":"injector.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/di/injector.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,2BAA2C,sBAAsB,CAAC,CAAA;AAClE,qBAAwB,gBAAgB,CAAC,CAAA;AAEzC,IAAM,mBAAmB,GAAG,IAAI,MAAM,EAAE,CAAC;AAC5B,0BAAkB,GAAG,mBAAmB,CAAC;AAEtD;IAAA;IAOA,CAAC;IANC,2BAAG,GAAH,UAAI,KAAU,EAAE,aAAwC;QAAxC,6BAAwC,GAAxC,mCAAwC;QACtD,EAAE,CAAC,CAAC,aAAa,KAAK,mBAAmB,CAAC,CAAC,CAAC;YAC1C,MAAM,IAAI,0BAAa,CAAC,qBAAmB,gBAAS,CAAC,KAAK,CAAC,MAAG,CAAC,CAAC;QAClE,CAAC;QACD,MAAM,CAAC,aAAa,CAAC;IACvB,CAAC;IACH,oBAAC;AAAD,CAAC,AAPD,IAOC;AAED;;GAEG;AACH;IAAA;IA6BA,CAAC;IAzBC;;;;;;;;;;;;;;;;;;;;;;;OAuBG;IACH,sBAAG,GAAH,UAAI,KAAU,EAAE,aAAmB,IAAS,MAAM,CAAC,0BAAa,EAAE,CAAC,CAAC,CAAC;IA3B9D,2BAAkB,GAAG,mBAAmB,CAAC;IACzC,aAAI,GAAa,IAAI,aAAa,EAAE,CAAC;IA2B9C,eAAC;AAAD,CAAC,AA7BD,IA6BC;AA7BqB,gBAAQ,WA6B7B,CAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BaseException, unimplemented} from '../facade/exceptions';\nimport {stringify} from '../facade/lang';\n\nconst _THROW_IF_NOT_FOUND = new Object();\nexport const THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n\nclass _NullInjector implements Injector {\n  get(token: any, notFoundValue: any = _THROW_IF_NOT_FOUND): any {\n    if (notFoundValue === _THROW_IF_NOT_FOUND) {\n      throw new BaseException(`No provider for ${stringify(token)}!`);\n    }\n    return notFoundValue;\n  }\n}\n\n/**\n * @stable\n */\nexport abstract class Injector {\n  static THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n  static NULL: Injector = new _NullInjector();\n\n  /**\n   * Retrieves an instance from the injector based on the provided token.\n   * If not found:\n   * - Throws {@link NoProviderError} if no `notFoundValue` that is not equal to\n   * Injector.THROW_IF_NOT_FOUND is given\n   * - Returns the `notFoundValue` otherwise\n   *\n   * ### Example ([live demo](http://plnkr.co/edit/HeXSHg?p=preview))\n   *\n   * ```typescript\n   * var injector = ReflectiveInjector.resolveAndCreate([\n   *   {provide: \"validToken\", useValue: \"Value\"}\n   * ]);\n   * expect(injector.get(\"validToken\")).toEqual(\"Value\");\n   * expect(() => injector.get(\"invalidToken\")).toThrowError();\n   * ```\n   *\n   * `Injector` returns itself when given `Injector` as a token.\n   *\n   * ```typescript\n   * var injector = ReflectiveInjector.resolveAndCreate([]);\n   * expect(injector.get(Injector)).toBe(injector);\n   * ```\n   */\n  get(token: any, notFoundValue?: any): any { return unimplemented(); }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}