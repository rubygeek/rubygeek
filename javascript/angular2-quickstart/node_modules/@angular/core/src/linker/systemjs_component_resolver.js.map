{"version":3,"file":"systemjs_component_resolver.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/linker/systemjs_component_resolver.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,wBAAsB,YAAY,CAAC,CAAA;AACnC,mBAAyB,OAAO,CAAC,CAAA;AACjC,qBAAqC,gBAAgB,CAAC,CAAA;AAGtD,mCAAgC,sBAAsB,CAAC,CAAA;AAEvD,IAAM,UAAU,GAAG,GAAG,CAAC;AACvB;IACE,mCAAoB,SAA4B,EAAU,QAAiB;QAAvD,cAAS,GAAT,SAAS,CAAmB;QAAU,aAAQ,GAAR,QAAQ,CAAS;IAAG,CAAC;IAE/E,oDAAgB,GAAhB,UAAiB,aAA0B;QAA3C,iBAgBC;QAfC,EAAE,CAAC,CAAC,eAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,sCAAiB,CAAC,yBAAyB,CAAC,CAAC;YAChE,IAAA,oCAAyD,EAApD,cAAM,EAAE,mBAAS,CAAoC;YAE1D,EAAE,CAAC,CAAC,WAAS,KAAK,KAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC1B,wDAAwD;gBACxD,WAAS,GAAG,SAAS,CAAC;YACxB,CAAC;YAED,MAAM,CAAO,aAAO;iBACf,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;iBACrB,IAAI,CAAC,UAAC,MAAW,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,MAAM,CAAC,WAAS,CAAC,CAAC,EAAlD,CAAkD,CAAC,CAAC;QACjF,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;IACxD,CAAC;IAED,8CAAU,GAAV,cAAoB,CAAC;IACvB,kBAAkB;IACX,oCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,eAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,wCAAc,GAA2D;QAChF,EAAC,IAAI,EAAE,sCAAiB,GAAG;QAC3B,EAAC,IAAI,EAAE,iBAAO,GAAG;KAChB,CAAC;IACF,gCAAC;AAAD,CAAC,AA/BD,IA+BC;AA/BY,iCAAyB,4BA+BrC,CAAA;AAED,IAAM,qBAAqB,GAAG,YAAY,CAAC;AAC3C,IAAM,oBAAoB,GAAG,WAAW,CAAC;AACzC;IACE,oCAAoB,QAAiB;QAAjB,aAAQ,GAAR,QAAQ,CAAS;IAAG,CAAC;IACzC,qDAAgB,GAAhB,UAAiB,aAA0B;QACzC,EAAE,CAAC,CAAC,eAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,sCAAiB,CAAC,yBAAyB,CAAC,CAAC;YAChE,IAAA,oCAAuD,EAAlD,cAAM,EAAE,iBAAO,CAAoC;YACxD,MAAM,CAAO,aAAO;iBACf,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,qBAAqB,CAAC;iBAC7C,IAAI,CAAC,UAAC,MAAW,IAAK,OAAA,MAAM,CAAC,SAAO,GAAG,oBAAoB,CAAC,EAAtC,CAAsC,CAAC,CAAC;QACrE,CAAC;QAED,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED,+CAAU,GAAV,cAAoB,CAAC;IACvB,kBAAkB;IACX,qCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,eAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,yCAAc,GAA2D;QAChF,EAAC,IAAI,EAAE,iBAAO,GAAG;KAChB,CAAC;IACF,iCAAC;AAAD,CAAC,AAvBD,IAuBC;AAvBY,kCAA0B,6BAuBtC,CAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Console} from '../console';\nimport {Injectable} from '../di';\nimport {Type, global, isString} from '../facade/lang';\n\nimport {ComponentFactory} from './component_factory';\nimport {ComponentResolver} from './component_resolver';\n\nconst _SEPARATOR = '#';\nexport class SystemJsComponentResolver implements ComponentResolver {\n  constructor(private _resolver: ComponentResolver, private _console: Console) {}\n\n  resolveComponent(componentType: string|Type): Promise<ComponentFactory<any>> {\n    if (isString(componentType)) {\n      this._console.warn(ComponentResolver.LazyLoadingDeprecationMsg);\n      let [module, component] = componentType.split(_SEPARATOR);\n\n      if (component === void(0)) {\n        // Use the default export when no component is specified\n        component = 'default';\n      }\n\n      return (<any>global)\n          .System.import(module)\n          .then((module: any) => this._resolver.resolveComponent(module[component]));\n    }\n\n    return this._resolver.resolveComponent(componentType);\n  }\n\n  clearCache(): void {}\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: ComponentResolver, },\n{type: Console, },\n];\n}\n\nconst FACTORY_MODULE_SUFFIX = '.ngfactory';\nconst FACTORY_CLASS_SUFFIX = 'NgFactory';\nexport class SystemJsCmpFactoryResolver implements ComponentResolver {\n  constructor(private _console: Console) {}\n  resolveComponent(componentType: string|Type): Promise<ComponentFactory<any>> {\n    if (isString(componentType)) {\n      this._console.warn(ComponentResolver.LazyLoadingDeprecationMsg);\n      let [module, factory] = componentType.split(_SEPARATOR);\n      return (<any>global)\n          .System.import(module + FACTORY_MODULE_SUFFIX)\n          .then((module: any) => module[factory + FACTORY_CLASS_SUFFIX]);\n    }\n\n    return Promise.resolve(null);\n  }\n\n  clearCache(): void {}\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: Console, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}