{"version":3,"file":"system_js_ng_module_factory_loader.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/linker/system_js_ng_module_factory_loader.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAGH,mBAAmC,OAAO,CAAC,CAAA;AAC3C,qBAAqB,gBAAgB,CAAC,CAAA;AAEtC,yBAAuB,YAAY,CAAC,CAAA;AAIpC,IAAM,UAAU,GAAG,GAAG,CAAC;AAEvB,IAAM,qBAAqB,GAAG,YAAY,CAAC;AAC3C,IAAM,oBAAoB,GAAG,WAAW,CAAC;AACzC;IACE,gCAAoB,SAAmB;QAAnB,cAAS,GAAT,SAAS,CAAU;IAAG,CAAC;IAE3C,qCAAI,GAAJ,UAAK,IAAY;QACf,IAAM,WAAW,GAAG,IAAI,CAAC,SAAS,YAAY,mBAAQ,CAAC;QACvD,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IAC1E,CAAC;IAEO,+CAAc,GAAtB,UAAuB,IAAY;QAAnC,iBASC;QARC,IAAA,2BAAiD,EAA5C,cAAM,EAAE,kBAAU,CAA2B;QAClD,EAAE,CAAC,CAAC,UAAU,KAAK,SAAS,CAAC;YAAC,UAAU,GAAG,SAAS,CAAC;QAErD,MAAM,CAAO,aAAO;aACf,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;aACrB,IAAI,CAAC,UAAC,MAAW,IAAK,OAAA,MAAM,CAAC,UAAU,CAAC,EAAlB,CAAkB,CAAC;aACzC,IAAI,CAAC,UAAC,IAAS,IAAK,OAAA,aAAa,CAAC,IAAI,EAAE,MAAM,EAAE,UAAU,CAAC,EAAvC,CAAuC,CAAC;aAC5D,IAAI,CAAC,UAAC,IAAS,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAvC,CAAuC,CAAC,CAAC;IACpE,CAAC;IAEO,4CAAW,GAAnB,UAAoB,IAAY;QAC9B,IAAA,2BAAiD,EAA5C,cAAM,EAAE,kBAAU,CAA2B;QAClD,EAAE,CAAC,CAAC,UAAU,KAAK,SAAS,CAAC;YAAC,UAAU,GAAG,SAAS,CAAC;QAErD,MAAM,CAAO,aAAO;aACf,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,qBAAqB,CAAC;aAC7C,IAAI,CAAC,UAAC,MAAW,IAAK,OAAA,MAAM,CAAC,UAAU,GAAG,oBAAoB,CAAC,EAAzC,CAAyC,CAAC;aAChE,IAAI,CAAC,UAAC,OAAY,IAAK,OAAA,aAAa,CAAC,OAAO,EAAE,MAAM,EAAE,UAAU,CAAC,EAA1C,CAA0C,CAAC,CAAC;IAC1E,CAAC;IACH,kBAAkB;IACX,iCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,eAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,qCAAc,GAA2D;QAChF,EAAC,IAAI,EAAE,mBAAQ,GAAG;KACjB,CAAC;IACF,6BAAC;AAAD,CAAC,AApCD,IAoCC;AApCY,8BAAsB,yBAoClC,CAAA;AAED,uBAAuB,KAAU,EAAE,UAAkB,EAAE,UAAkB;IACvE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QACX,MAAM,IAAI,KAAK,CAAC,kBAAgB,UAAU,cAAS,UAAU,MAAG,CAAC,CAAC;IACpE,CAAC;IACD,MAAM,CAAC,KAAK,CAAC;AACf,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional} from '../di';\nimport {global} from '../facade/lang';\n\nimport {Compiler} from './compiler';\nimport {NgModuleFactory} from './ng_module_factory';\nimport {NgModuleFactoryLoader} from './ng_module_factory_loader';\n\nconst _SEPARATOR = '#';\n\nconst FACTORY_MODULE_SUFFIX = '.ngfactory';\nconst FACTORY_CLASS_SUFFIX = 'NgFactory';\nexport class SystemJsNgModuleLoader implements NgModuleFactoryLoader {\n  constructor(private _compiler: Compiler) {}\n\n  load(path: string): Promise<NgModuleFactory<any>> {\n    const offlineMode = this._compiler instanceof Compiler;\n    return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);\n  }\n\n  private loadAndCompile(path: string): Promise<NgModuleFactory<any>> {\n    let [module, exportName] = path.split(_SEPARATOR);\n    if (exportName === undefined) exportName = 'default';\n\n    return (<any>global)\n        .System.import(module)\n        .then((module: any) => module[exportName])\n        .then((type: any) => checkNotEmpty(type, module, exportName))\n        .then((type: any) => this._compiler.compileModuleAsync(type));\n  }\n\n  private loadFactory(path: string): Promise<NgModuleFactory<any>> {\n    let [module, exportName] = path.split(_SEPARATOR);\n    if (exportName === undefined) exportName = 'default';\n\n    return (<any>global)\n        .System.import(module + FACTORY_MODULE_SUFFIX)\n        .then((module: any) => module[exportName + FACTORY_CLASS_SUFFIX])\n        .then((factory: any) => checkNotEmpty(factory, module, exportName));\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: Compiler, },\n];\n}\n\nfunction checkNotEmpty(value: any, modulePath: string, exportName: string): any {\n  if (!value) {\n    throw new Error(`Cannot find '${exportName}' in '${modulePath}'`);\n  }\n  return value;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}