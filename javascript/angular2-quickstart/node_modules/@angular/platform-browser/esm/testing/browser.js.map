{"version":3,"file":"browser.js","sourceRoot":"","sources":["../../../../../modules/@angular/platform-browser/testing/browser.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAGI,EAAC,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAe,yBAAyB,EAAE,oBAAoB,EAAmE,qBAAqB,EAAe,YAAY,EAAC,MAAM,eAAe;OAEhO,EAAC,aAAa,EAAC,MAAM,gBAAgB;OACrC,EAAC,iBAAiB,EAAC,MAAM,gCAAgC;OACzD,EAAC,eAAe,EAAC,MAAM,6BAA6B;OACpD,EAAC,uBAAuB,EAAC,MAAM,2BAA2B;OAE1D,EAAC,gBAAgB,EAAC,MAAM,gBAAgB;AAE/C;IACE,iBAAiB,CAAC,WAAW,EAAE,CAAC;IAChC,gBAAgB,CAAC,KAAK,EAAE,CAAC;AAC3B,CAAC;AAED;IACE,MAAM,CAAC,IAAI,MAAM,CAAC,EAAC,oBAAoB,EAAE,IAAI,EAAC,CAAC,CAAC;AAClD,CAAC;AAED,MAAM,gCAAgC,GAClC,CAAC,EAAC,OAAO,EAAE,oBAAoB,EAAE,QAAQ,EAAE,gBAAgB,EAAE,KAAK,EAAE,IAAI,EAAC,CAAC,CAAC;AAE/E;;;;;GAKG;AACH,OAAO,MAAM,+BAA+B,GACxC,CAAC,yBAAyB,EAAE,gCAAgC,CAAC,CAAC;AAElE;;;;;GAKG;AACH,OAAO,MAAM,kCAAkC,GAA2C,EAAE,CAAC;AAE7F;;;;GAIG;AACH,OAAO,MAAM,sBAAsB,GAC/B,qBAAqB,CAAC,YAAY,EAAE,gBAAgB,EAAE,gCAAgC,CAAC,CAAC;AAE5F;;GAEG;AACH,OAAO,MAAM,sBAAsB,GAAG,sBAAsB,CAAC;AAC7D;AAYA,CAAC;AAXD,kBAAkB;AACX,+BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;gBACvB,OAAO,EAAE,CAAC,aAAa,CAAC;gBACxB,SAAS,EAAE;oBACT,EAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAC,EAAE,uBAAuB;oBACzD,EAAC,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,YAAY,EAAC;oBAC3C,EAAC,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,eAAe,CAAC,IAAI,EAAC;iBAC3D;aACF,EAAG,EAAE;CACL,CACA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LocationStrategy} from '@angular/common';\nimport {APP_ID, NgModule, NgZone, OpaqueToken, PLATFORM_COMMON_PROVIDERS, PLATFORM_INITIALIZER, PlatformRef, ReflectiveInjector, assertPlatform, createPlatform, createPlatformFactory, getPlatform, platformCore} from '@angular/core';\n\nimport {BrowserModule} from '../src/browser';\nimport {BrowserDomAdapter} from '../src/browser/browser_adapter';\nimport {AnimationDriver} from '../src/dom/animation_driver';\nimport {ELEMENT_PROBE_PROVIDERS} from '../src/dom/debug/ng_probe';\n\nimport {BrowserDetection} from './browser_util';\n\nfunction initBrowserTests() {\n  BrowserDomAdapter.makeCurrent();\n  BrowserDetection.setup();\n}\n\nfunction createNgZone(): NgZone {\n  return new NgZone({enableLongStackTrace: true});\n}\n\nconst _TEST_BROWSER_PLATFORM_PROVIDERS: Array<any /*Type | Provider | any[]*/> =\n    [{provide: PLATFORM_INITIALIZER, useValue: initBrowserTests, multi: true}];\n\n/**\n * Providers for the browser test platform\n *\n * @deprecated Use `platformBrowserTesting()` or create a custom platform factory via\n * `createPlatformFactory(platformBrowserTesting, ...)`\n */\nexport const TEST_BROWSER_PLATFORM_PROVIDERS: Array<any /*Type | Provider | any[]*/> =\n    [PLATFORM_COMMON_PROVIDERS, _TEST_BROWSER_PLATFORM_PROVIDERS];\n\n/**\n * @deprecated Use initTestEnvironment with BrowserTestModule instead. This is empty for backwards\n * compatibility,\n * as all of our bootstrap methods add a module implicitly, i.e. keeping this filled would add the\n * providers 2x.\n */\nexport const TEST_BROWSER_APPLICATION_PROVIDERS: Array<any /*Type | Provider | any[]*/> = [];\n\n/**\n * Platform for testing\n *\n * @experimental API related to bootstrapping are still under review.\n */\nexport const platformBrowserTesting =\n    createPlatformFactory(platformCore, 'browserTesting', _TEST_BROWSER_PLATFORM_PROVIDERS);\n\n/**\n * @deprecated Use {@link platformBrowserTesting} instead\n */\nexport const browserTestingPlatform = platformBrowserTesting;\nexport class BrowserTestingModule {\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [BrowserModule],\n  providers: [\n    {provide: APP_ID, useValue: 'a'}, ELEMENT_PROBE_PROVIDERS,\n    {provide: NgZone, useFactory: createNgZone},\n    {provide: AnimationDriver, useValue: AnimationDriver.NOOP}\n  ]\n}, ] },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}