{"version":3,"file":"browser.js","sourceRoot":"","sources":["../../../../modules/@angular/platform-browser/testing/browser.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAGH,qBAAwN,eAAe,CAAC,CAAA;AAExO,wBAA4B,gBAAgB,CAAC,CAAA;AAC7C,gCAAgC,gCAAgC,CAAC,CAAA;AACjE,iCAA8B,6BAA6B,CAAC,CAAA;AAC5D,yBAAsC,2BAA2B,CAAC,CAAA;AAElE,6BAA+B,gBAAgB,CAAC,CAAA;AAEhD;IACE,mCAAiB,CAAC,WAAW,EAAE,CAAC;IAChC,+BAAgB,CAAC,KAAK,EAAE,CAAC;AAC3B,CAAC;AAED;IACE,MAAM,CAAC,IAAI,aAAM,CAAC,EAAC,oBAAoB,EAAE,IAAI,EAAC,CAAC,CAAC;AAClD,CAAC;AAED,IAAM,gCAAgC,GAClC,CAAC,EAAC,OAAO,EAAE,2BAAoB,EAAE,QAAQ,EAAE,gBAAgB,EAAE,KAAK,EAAE,IAAI,EAAC,CAAC,CAAC;AAE/E;;;;;GAKG;AACU,uCAA+B,GACxC,CAAC,gCAAyB,EAAE,gCAAgC,CAAC,CAAC;AAElE;;;;;GAKG;AACU,0CAAkC,GAA2C,EAAE,CAAC;AAE7F;;;;GAIG;AACU,8BAAsB,GAC/B,4BAAqB,CAAC,mBAAY,EAAE,gBAAgB,EAAE,gCAAgC,CAAC,CAAC;AAE5F;;GAEG;AACU,8BAAsB,GAAG,8BAAsB,CAAC;AAC7D;IAAA;IAYA,CAAC;IAXD,kBAAkB;IACX,+BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,eAAQ,EAAE,IAAI,EAAE,CAAC;oBACvB,OAAO,EAAE,CAAC,uBAAa,CAAC;oBACxB,SAAS,EAAE;wBACT,EAAC,OAAO,EAAE,aAAM,EAAE,QAAQ,EAAE,GAAG,EAAC,EAAE,kCAAuB;wBACzD,EAAC,OAAO,EAAE,aAAM,EAAE,UAAU,EAAE,YAAY,EAAC;wBAC3C,EAAC,OAAO,EAAE,kCAAe,EAAE,QAAQ,EAAE,kCAAe,CAAC,IAAI,EAAC;qBAC3D;iBACF,EAAG,EAAE;KACL,CAAC;IACF,2BAAC;AAAD,CAAC,AAZD,IAYC;AAZY,4BAAoB,uBAYhC,CAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LocationStrategy} from '@angular/common';\nimport {APP_ID, NgModule, NgZone, OpaqueToken, PLATFORM_COMMON_PROVIDERS, PLATFORM_INITIALIZER, PlatformRef, ReflectiveInjector, assertPlatform, createPlatform, createPlatformFactory, getPlatform, platformCore} from '@angular/core';\n\nimport {BrowserModule} from '../src/browser';\nimport {BrowserDomAdapter} from '../src/browser/browser_adapter';\nimport {AnimationDriver} from '../src/dom/animation_driver';\nimport {ELEMENT_PROBE_PROVIDERS} from '../src/dom/debug/ng_probe';\n\nimport {BrowserDetection} from './browser_util';\n\nfunction initBrowserTests() {\n  BrowserDomAdapter.makeCurrent();\n  BrowserDetection.setup();\n}\n\nfunction createNgZone(): NgZone {\n  return new NgZone({enableLongStackTrace: true});\n}\n\nconst _TEST_BROWSER_PLATFORM_PROVIDERS: Array<any /*Type | Provider | any[]*/> =\n    [{provide: PLATFORM_INITIALIZER, useValue: initBrowserTests, multi: true}];\n\n/**\n * Providers for the browser test platform\n *\n * @deprecated Use `platformBrowserTesting()` or create a custom platform factory via\n * `createPlatformFactory(platformBrowserTesting, ...)`\n */\nexport const TEST_BROWSER_PLATFORM_PROVIDERS: Array<any /*Type | Provider | any[]*/> =\n    [PLATFORM_COMMON_PROVIDERS, _TEST_BROWSER_PLATFORM_PROVIDERS];\n\n/**\n * @deprecated Use initTestEnvironment with BrowserTestModule instead. This is empty for backwards\n * compatibility,\n * as all of our bootstrap methods add a module implicitly, i.e. keeping this filled would add the\n * providers 2x.\n */\nexport const TEST_BROWSER_APPLICATION_PROVIDERS: Array<any /*Type | Provider | any[]*/> = [];\n\n/**\n * Platform for testing\n *\n * @experimental API related to bootstrapping are still under review.\n */\nexport const platformBrowserTesting =\n    createPlatformFactory(platformCore, 'browserTesting', _TEST_BROWSER_PLATFORM_PROVIDERS);\n\n/**\n * @deprecated Use {@link platformBrowserTesting} instead\n */\nexport const browserTestingPlatform = platformBrowserTesting;\nexport class BrowserTestingModule {\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [BrowserModule],\n  providers: [\n    {provide: APP_ID, useValue: 'a'}, ELEMENT_PROBE_PROVIDERS,\n    {provide: NgZone, useFactory: createNgZone},\n    {provide: AnimationDriver, useValue: AnimationDriver.NOOP}\n  ]\n}, ] },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}