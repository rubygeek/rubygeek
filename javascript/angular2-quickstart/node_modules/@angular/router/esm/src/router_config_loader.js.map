{"version":3,"file":"router_config_loader.js","sourceRoot":"","sources":["../../../../../modules/@angular/router/src/router_config_loader.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAA4D,WAAW,EAAC,MAAM,eAAe;OAE7F,EAAC,WAAW,EAAC,MAAM,6BAA6B;OAGhD,EAAC,OAAO,EAAC,MAAM,oBAAoB;AAG1C;;GAEG;AACH,OAAO,MAAM,aAAa,GAAG,IAAI,WAAW,CAAC,eAAe,CAAC,CAAC;AAC9D,OAAO,MAAM,MAAM,GAAG,IAAI,WAAW,CAAC,QAAQ,CAAC,CAAC;AAEhD;IACE,YACW,MAAe,EAAS,QAAkB,EAC1C,eAAyC;QADzC,WAAM,GAAN,MAAM,CAAS;QAAS,aAAQ,GAAR,QAAQ,CAAU;QAC1C,oBAAe,GAAf,eAAe,CAA0B;IAAG,CAAC;AAC1D,CAAC;AAED;IACE,YAAoB,MAA6B;QAA7B,WAAM,GAAN,MAAM,CAAuB;IAAG,CAAC;IAErD,IAAI,CAAC,cAAwB,EAAE,IAAY;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;YAC9C,MAAM,GAAG,GAAG,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;YACrC,MAAM,CAAC,IAAI,kBAAkB,CACzB,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,wBAAwB,CAAC,CAAC;QACrF,CAAC,CAAC,CAAC,CAAC;IACN,CAAC;AACH,CAAC;AAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentFactoryResolver, Injector, NgModuleFactoryLoader, OpaqueToken} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {fromPromise} from 'rxjs/observable/fromPromise';\n\nimport {Route} from './config';\nimport {flatten} from './utils/collection';\n\n\n/**\n * @deprecated use Routes\n */\nexport const ROUTER_CONFIG = new OpaqueToken('ROUTER_CONFIG');\nexport const ROUTES = new OpaqueToken('ROUTES');\n\nexport class LoadedRouterConfig {\n  constructor(\n      public routes: Route[], public injector: Injector,\n      public factoryResolver: ComponentFactoryResolver) {}\n}\n\nexport class RouterConfigLoader {\n  constructor(private loader: NgModuleFactoryLoader) {}\n\n  load(parentInjector: Injector, path: string): Observable<LoadedRouterConfig> {\n    return fromPromise(this.loader.load(path).then(r => {\n      const ref = r.create(parentInjector);\n      return new LoadedRouterConfig(\n          flatten(ref.injector.get(ROUTES)), ref.injector, ref.componentFactoryResolver);\n    }));\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}