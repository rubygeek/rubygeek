{"version":3,"file":"router_state.js","sourceRoot":"","sources":["../../../../modules/@angular/router/src/router_state.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentFactory, Type} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\n\nimport {Data, ResolveData, Route} from './config';\nimport {PRIMARY_OUTLET, Params} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree} from './url_tree';\nimport {merge, shallowEqual, shallowEqualArrays} from './utils/collection';\nimport {Tree, TreeNode} from './utils/tree';\n\n\n/**\n * The state of the router.\n *\n * ### Usage\n *\n * ```\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state = router.routerState;\n *     const id: Observable<string> = state.firstChild(state.root).params.map(p => p.id);\n *     const isDebug: Observable<string> = state.queryParams.map(q => q.debug);\n *   }\n * }\n * ```\n *\n * @stable\n */\nexport class RouterState extends Tree<ActivatedRoute> {\n  /**\n   * @internal\n   */\n  constructor(root: TreeNode<ActivatedRoute>, public snapshot: RouterStateSnapshot) {\n    super(root);\n    setRouterStateSnapshot<RouterState, ActivatedRoute>(this, root);\n  }\n\n  /**\n    * @deprecated (Use root.queryParams)\n    */\n  get queryParams(): Observable<Params> { return this.root.queryParams; }\n\n  /**\n   * @deprecated (Use root.fragment)\n   */\n  get fragment(): Observable<string> { return this.root.fragment; }\n\n  toString(): string { return this.snapshot.toString(); }\n}\n\nexport function createEmptyState(urlTree: UrlTree, rootComponent: Type): RouterState {\n  const snapshot = createEmptyStateSnapshot(urlTree, rootComponent);\n  const emptyUrl = new BehaviorSubject([new UrlSegment('', {})]);\n  const emptyParams = new BehaviorSubject({});\n  const emptyData = new BehaviorSubject({});\n  const emptyQueryParams = new BehaviorSubject({});\n  const fragment = new BehaviorSubject('');\n  const activated = new ActivatedRoute(\n      emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent,\n      snapshot.root);\n  activated.snapshot = snapshot.root;\n  return new RouterState(new TreeNode<ActivatedRoute>(activated, []), snapshot);\n}\n\nfunction createEmptyStateSnapshot(urlTree: UrlTree, rootComponent: Type): RouterStateSnapshot {\n  const emptyParams = {};\n  const emptyData = {};\n  const emptyQueryParams = {};\n  const fragment = '';\n  const activated = new ActivatedRouteSnapshot(\n      [], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null,\n      urlTree.root, -1, InheritedResolve.empty);\n  return new RouterStateSnapshot('', new TreeNode<ActivatedRouteSnapshot>(activated, []));\n}\n\n/**\n * Contains the information about a component loaded in an outlet. The information is provided\n * through the params, urlSegments, and data observables.\n *\n * ### Usage\n *\n * ```\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: Observable<string> = route.params.map(p => p.id);\n *     const data = route.data.map(d => d.user); //includes `data` and `resolve`\n *   }\n * }\n * ```\n *\n * @stable\n */\nexport class ActivatedRoute {\n  /** @internal */\n  _futureSnapshot: ActivatedRouteSnapshot;\n  snapshot: ActivatedRouteSnapshot;\n\n  /** @internal */\n  _routerState: RouterState;\n\n  /**\n   * @internal\n   */\n  constructor(\n      public url: Observable<UrlSegment[]>, public params: Observable<Params>,\n      public queryParams: Observable<Params>, public fragment: Observable<string>,\n      public data: Observable<Data>, public outlet: string, public component: Type|string,\n      futureSnapshot: ActivatedRouteSnapshot) {\n    this._futureSnapshot = futureSnapshot;\n  }\n\n  get routeConfig(): Route { return this._futureSnapshot.routeConfig; }\n\n  get root(): ActivatedRoute { return this._routerState.root; }\n\n  get parent(): ActivatedRoute { return this._routerState.parent(this); }\n\n  get firstChild(): ActivatedRoute { return this._routerState.firstChild(this); }\n\n  get children(): ActivatedRoute[] { return this._routerState.children(this); }\n\n  get pathFromRoot(): ActivatedRoute[] { return this._routerState.pathFromRoot(this); }\n\n  toString(): string {\n    return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;\n  }\n}\n\n/**\n * @internal\n */\nexport class InheritedResolve {\n  /**\n   * @internal\n   */\n  resolvedData = {};\n\n  constructor(public parent: InheritedResolve, public current: ResolveData) {}\n\n  /**\n   * @internal\n   */\n  get flattenedResolvedData(): Data {\n    return this.parent ? merge(this.parent.flattenedResolvedData, this.resolvedData) :\n                         this.resolvedData;\n  }\n\n  static get empty(): InheritedResolve { return new InheritedResolve(null, {}); }\n}\n\n/**\n * Contains the information about a component loaded in an outlet at a particular moment in time.\n *\n * ### Usage\n *\n * ```\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const data = route.snapshot.data;\n *   }\n * }\n * ```\n *\n * @stable\n */\nexport class ActivatedRouteSnapshot {\n  /**\n   * @internal\n   */\n  _resolvedComponentFactory: ComponentFactory<any>;\n\n  /** @internal **/\n  _routeConfig: Route;\n\n  /** @internal **/\n  _urlSegment: UrlSegmentGroup;\n\n  /** @internal */\n  _lastPathIndex: number;\n\n  /** @internal */\n  _resolve: InheritedResolve;\n\n  /** @internal */\n  _routerState: RouterStateSnapshot;\n\n  /**\n   * @internal\n   */\n  constructor(\n      public url: UrlSegment[], public params: Params, public queryParams: Params,\n      public fragment: string, public data: Data, public outlet: string,\n      public component: Type|string, routeConfig: Route, urlSegment: UrlSegmentGroup,\n      lastPathIndex: number, resolve: InheritedResolve) {\n    this._routeConfig = routeConfig;\n    this._urlSegment = urlSegment;\n    this._lastPathIndex = lastPathIndex;\n    this._resolve = resolve;\n  }\n\n  get routeConfig(): Route { return this._routeConfig; }\n\n  get root(): ActivatedRouteSnapshot { return this._routerState.root; }\n\n  get parent(): ActivatedRouteSnapshot { return this._routerState.parent(this); }\n\n  get firstChild(): ActivatedRouteSnapshot { return this._routerState.firstChild(this); }\n\n  get children(): ActivatedRouteSnapshot[] { return this._routerState.children(this); }\n\n  get pathFromRoot(): ActivatedRouteSnapshot[] { return this._routerState.pathFromRoot(this); }\n\n  toString(): string {\n    const url = this.url.map(s => s.toString()).join('/');\n    const matched = this._routeConfig ? this._routeConfig.path : '';\n    return `Route(url:'${url}', path:'${matched}')`;\n  }\n}\n\n/**\n * The state of the router at a particular moment in time.\n *\n * ### Usage\n *\n * ```\n * class MyComponent {\n *   constructor(router: Router) {\n *     const snapshot = router.routerState.snapshot;\n *   }\n * }\n * ```\n *\n * @stable\n */\nexport class RouterStateSnapshot extends Tree<ActivatedRouteSnapshot> {\n  /**\n   * @internal\n   */\n  constructor(public url: string, root: TreeNode<ActivatedRouteSnapshot>) {\n    super(root);\n    setRouterStateSnapshot<RouterStateSnapshot, ActivatedRouteSnapshot>(this, root);\n  }\n\n  /**\n   * @deprecated (Use root.queryParams)\n   */\n  get queryParams(): Params { return this.root.queryParams; }\n\n  /**\n   * @deprecated (Use root.fragment)\n   */\n  get fragment(): string { return this.root.fragment; }\n\n  toString(): string { return serializeNode(this._root); }\n}\n\nfunction setRouterStateSnapshot<U, T extends{_routerState: U}>(state: U, node: TreeNode<T>): void {\n  node.value._routerState = state;\n  node.children.forEach(c => setRouterStateSnapshot(state, c));\n}\n\nfunction serializeNode(node: TreeNode<ActivatedRouteSnapshot>): string {\n  const c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(\", \")} } ` : '';\n  return `${node.value}${c}`;\n}\n\n/**\n * The expectation is that the activate route is created with the right set of parameters.\n * So we push new values into the observables only when they are not the initial values.\n * And we detect that by checking if the snapshot field is set.\n */\nexport function advanceActivatedRoute(route: ActivatedRoute): void {\n  if (route.snapshot) {\n    if (!shallowEqual(route.snapshot.queryParams, route._futureSnapshot.queryParams)) {\n      (<any>route.queryParams).next(route._futureSnapshot.queryParams);\n    }\n    if (route.snapshot.fragment !== route._futureSnapshot.fragment) {\n      (<any>route.fragment).next(route._futureSnapshot.fragment);\n    }\n    if (!shallowEqual(route.snapshot.params, route._futureSnapshot.params)) {\n      (<any>route.params).next(route._futureSnapshot.params);\n      (<any>route.data).next(route._futureSnapshot.data);\n    }\n    if (!shallowEqualArrays(route.snapshot.url, route._futureSnapshot.url)) {\n      (<any>route.url).next(route._futureSnapshot.url);\n    }\n    route.snapshot = route._futureSnapshot;\n  } else {\n    route.snapshot = route._futureSnapshot;\n\n    // this is for resolved data\n    (<any>route.data).next(route._futureSnapshot.data);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}