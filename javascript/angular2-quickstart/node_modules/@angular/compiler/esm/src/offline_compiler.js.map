{"version":3,"file":"offline_compiler.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/offline_compiler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {SchemaMetadata} from '@angular/core';\nimport {CompileDirectiveMetadata, CompileIdentifierMetadata, CompileNgModuleMetadata, CompilePipeMetadata, StaticSymbol, createHostComponentMeta} from './compile_metadata';\nimport {DirectiveNormalizer} from './directive_normalizer';\nimport {ListWrapper} from './facade/collection';\nimport {BaseException} from './facade/exceptions';\nimport {Identifiers} from './identifiers';\nimport {CompileMetadataResolver} from './metadata_resolver';\nimport {NgModuleCompiler} from './ng_module_compiler';\nimport {OutputEmitter} from './output/abstract_emitter';\nimport * as o from './output/output_ast';\nimport {CompiledStylesheet, StyleCompiler} from './style_compiler';\nimport {TemplateParser} from './template_parser/template_parser';\nimport {ComponentFactoryDependency, ViewCompileResult, ViewCompiler, ViewFactoryDependency} from './view_compiler/view_compiler';\n\nexport class SourceModule {\n  constructor(public moduleUrl: string, public source: string) {}\n}\n\nexport class NgModulesSummary {\n  constructor(public ngModuleByComponent: Map<StaticSymbol, CompileNgModuleMetadata>) {}\n}\n\nexport class OfflineCompiler {\n  constructor(\n      private _metadataResolver: CompileMetadataResolver,\n      private _directiveNormalizer: DirectiveNormalizer, private _templateParser: TemplateParser,\n      private _styleCompiler: StyleCompiler, private _viewCompiler: ViewCompiler,\n      private _ngModuleCompiler: NgModuleCompiler, private _outputEmitter: OutputEmitter) {}\n\n  analyzeModules(ngModules: StaticSymbol[]): NgModulesSummary {\n    const ngModuleByComponent = new Map<StaticSymbol, CompileNgModuleMetadata>();\n\n    ngModules.forEach((ngModule) => {\n      const ngModuleMeta = this._metadataResolver.getNgModuleMetadata(<any>ngModule);\n      ngModuleMeta.declaredDirectives.forEach((dirMeta) => {\n        if (dirMeta.isComponent) {\n          ngModuleByComponent.set(dirMeta.type.runtime, ngModuleMeta);\n        }\n      });\n    });\n    return new NgModulesSummary(ngModuleByComponent);\n  }\n\n  clearCache() {\n    this._directiveNormalizer.clearCache();\n    this._metadataResolver.clearCache();\n  }\n\n  compile(\n      moduleUrl: string, ngModulesSummary: NgModulesSummary, components: StaticSymbol[],\n      ngModules: StaticSymbol[]): Promise<SourceModule[]> {\n    let fileSuffix = _splitLastSuffix(moduleUrl)[1];\n    let statements: o.Statement[] = [];\n    let exportedVars: string[] = [];\n    let outputSourceModules: SourceModule[] = [];\n\n    // compile all ng modules\n    exportedVars.push(\n        ...ngModules.map((ngModuleType) => this._compileModule(ngModuleType, statements)));\n\n    // compile components\n    return Promise\n        .all(components.map((compType) => {\n          const compMeta = this._metadataResolver.getDirectiveMetadata(<any>compType);\n          const ngModule = ngModulesSummary.ngModuleByComponent.get(compType);\n          if (!ngModule) {\n            throw new BaseException(\n                `Cannot determine the module for component ${compMeta.type.name}!`);\n          }\n          return Promise\n              .all([compMeta, ...ngModule.transitiveModule.directives].map(\n                  dirMeta => this._directiveNormalizer.normalizeDirective(dirMeta).asyncResult))\n              .then((normalizedCompWithDirectives) => {\n                const compMeta = normalizedCompWithDirectives[0];\n                const dirMetas = normalizedCompWithDirectives.slice(1);\n                _assertComponent(compMeta);\n\n                // compile styles\n                const stylesCompileResults = this._styleCompiler.compileComponent(compMeta);\n                stylesCompileResults.externalStylesheets.forEach((compiledStyleSheet) => {\n                  outputSourceModules.push(this._codgenStyles(compiledStyleSheet, fileSuffix));\n                });\n\n                // compile components\n                exportedVars.push(this._compileComponentFactory(compMeta, fileSuffix, statements));\n                exportedVars.push(this._compileComponent(\n                    compMeta, dirMetas, ngModule.transitiveModule.pipes, ngModule.schemas,\n                    stylesCompileResults.componentStylesheet, fileSuffix, statements));\n              });\n        }))\n        .then(() => {\n          if (statements.length > 0) {\n            outputSourceModules.unshift(this._codegenSourceModule(\n                _ngfactoryModuleUrl(moduleUrl), statements, exportedVars));\n          }\n          return outputSourceModules;\n        });\n  }\n\n  private _compileModule(ngModuleType: StaticSymbol, targetStatements: o.Statement[]): string {\n    const ngModule = this._metadataResolver.getNgModuleMetadata(<any>ngModuleType);\n    let appCompileResult = this._ngModuleCompiler.compile(ngModule, []);\n    appCompileResult.dependencies.forEach((dep) => {\n      dep.placeholder.name = _componentFactoryName(dep.comp);\n      dep.placeholder.moduleUrl = _ngfactoryModuleUrl(dep.comp.moduleUrl);\n    });\n    targetStatements.push(...appCompileResult.statements);\n    return appCompileResult.ngModuleFactoryVar;\n  }\n\n  private _compileComponentFactory(\n      compMeta: CompileDirectiveMetadata, fileSuffix: string,\n      targetStatements: o.Statement[]): string {\n    var hostMeta = createHostComponentMeta(compMeta);\n    var hostViewFactoryVar =\n        this._compileComponent(hostMeta, [compMeta], [], [], null, fileSuffix, targetStatements);\n    var compFactoryVar = _componentFactoryName(compMeta.type);\n    targetStatements.push(\n        o.variable(compFactoryVar)\n            .set(o.importExpr(Identifiers.ComponentFactory, [o.importType(compMeta.type)])\n                     .instantiate(\n                         [\n                           o.literal(compMeta.selector), o.variable(hostViewFactoryVar),\n                           o.importExpr(compMeta.type)\n                         ],\n                         o.importType(\n                             Identifiers.ComponentFactory, [o.importType(compMeta.type)],\n                             [o.TypeModifier.Const])))\n            .toDeclStmt(null, [o.StmtModifier.Final]));\n    return compFactoryVar;\n  }\n\n  private _compileComponent(\n      compMeta: CompileDirectiveMetadata, directives: CompileDirectiveMetadata[],\n      pipes: CompilePipeMetadata[], schemas: SchemaMetadata[], componentStyles: CompiledStylesheet,\n      fileSuffix: string, targetStatements: o.Statement[]): string {\n    var parsedTemplate = this._templateParser.parse(\n        compMeta, compMeta.template.template, directives, pipes, schemas, compMeta.type.name);\n    var stylesExpr = componentStyles ? o.variable(componentStyles.stylesVar) : o.literalArr([]);\n    var viewResult =\n        this._viewCompiler.compileComponent(compMeta, parsedTemplate, stylesExpr, pipes);\n    if (componentStyles) {\n      ListWrapper.addAll(targetStatements, _resolveStyleStatements(componentStyles, fileSuffix));\n    }\n    ListWrapper.addAll(targetStatements, _resolveViewStatements(viewResult));\n    return viewResult.viewFactoryVar;\n  }\n\n  private _codgenStyles(stylesCompileResult: CompiledStylesheet, fileSuffix: string): SourceModule {\n    _resolveStyleStatements(stylesCompileResult, fileSuffix);\n    return this._codegenSourceModule(\n        _stylesModuleUrl(\n            stylesCompileResult.meta.moduleUrl, stylesCompileResult.isShimmed, fileSuffix),\n        stylesCompileResult.statements, [stylesCompileResult.stylesVar]);\n  }\n\n  private _codegenSourceModule(\n      moduleUrl: string, statements: o.Statement[], exportedVars: string[]): SourceModule {\n    return new SourceModule(\n        moduleUrl, this._outputEmitter.emitStatements(moduleUrl, statements, exportedVars));\n  }\n}\n\nfunction _resolveViewStatements(compileResult: ViewCompileResult): o.Statement[] {\n  compileResult.dependencies.forEach((dep) => {\n    if (dep instanceof ViewFactoryDependency) {\n      let vfd = <ViewFactoryDependency>dep;\n      vfd.placeholder.moduleUrl = _ngfactoryModuleUrl(vfd.comp.moduleUrl);\n    } else if (dep instanceof ComponentFactoryDependency) {\n      let cfd = <ComponentFactoryDependency>dep;\n      cfd.placeholder.name = _componentFactoryName(cfd.comp);\n      cfd.placeholder.moduleUrl = _ngfactoryModuleUrl(cfd.comp.moduleUrl);\n    }\n  });\n  return compileResult.statements;\n}\n\n\nfunction _resolveStyleStatements(\n    compileResult: CompiledStylesheet, fileSuffix: string): o.Statement[] {\n  compileResult.dependencies.forEach((dep) => {\n    dep.valuePlaceholder.moduleUrl = _stylesModuleUrl(dep.moduleUrl, dep.isShimmed, fileSuffix);\n  });\n  return compileResult.statements;\n}\n\nfunction _ngfactoryModuleUrl(compUrl: string): string {\n  var urlWithSuffix = _splitLastSuffix(compUrl);\n  return `${urlWithSuffix[0]}.ngfactory${urlWithSuffix[1]}`;\n}\n\nfunction _componentFactoryName(comp: CompileIdentifierMetadata): string {\n  return `${comp.name}NgFactory`;\n}\n\nfunction _stylesModuleUrl(stylesheetUrl: string, shim: boolean, suffix: string): string {\n  return shim ? `${stylesheetUrl}.shim${suffix}` : `${stylesheetUrl}${suffix}`;\n}\n\nfunction _assertComponent(meta: CompileDirectiveMetadata) {\n  if (!meta.isComponent) {\n    throw new BaseException(`Could not compile '${meta.type.name}' because it is not a component.`);\n  }\n}\n\nfunction _splitLastSuffix(path: string): string[] {\n  let lastDot = path.lastIndexOf('.');\n  if (lastDot !== -1) {\n    return [path.substring(0, lastDot), path.substring(lastDot)];\n  } else {\n    return [path, ''];\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}