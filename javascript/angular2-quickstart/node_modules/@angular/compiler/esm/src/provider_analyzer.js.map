{"version":3,"file":"provider_analyzer.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/provider_analyzer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileDiDependencyMetadata, CompileDirectiveMetadata, CompileIdentifierMap, CompileNgModuleMetadata, CompileProviderMetadata, CompileQueryMetadata, CompileTokenMetadata, CompileTypeMetadata} from './compile_metadata';\nimport {ListWrapper} from './facade/collection';\nimport {BaseException} from './facade/exceptions';\nimport {isArray, isBlank, isPresent, normalizeBlank} from './facade/lang';\nimport {Identifiers, identifierToken} from './identifiers';\nimport {ParseError, ParseSourceSpan} from './parse_util';\nimport {AttrAst, DirectiveAst, ProviderAst, ProviderAstType, ReferenceAst, VariableAst} from './template_parser/template_ast';\n\nexport class ProviderError extends ParseError {\n  constructor(message: string, span: ParseSourceSpan) { super(span, message); }\n}\n\nexport class ProviderViewContext {\n  /**\n   * @internal\n   */\n  viewQueries: CompileIdentifierMap<CompileTokenMetadata, CompileQueryMetadata[]>;\n  /**\n   * @internal\n   */\n  viewProviders: CompileIdentifierMap<CompileTokenMetadata, boolean>;\n  errors: ProviderError[] = [];\n\n  constructor(public component: CompileDirectiveMetadata, public sourceSpan: ParseSourceSpan) {\n    this.viewQueries = _getViewQueries(component);\n    this.viewProviders = new CompileIdentifierMap<CompileTokenMetadata, boolean>();\n    _normalizeProviders(component.viewProviders, sourceSpan, this.errors).forEach((provider) => {\n      if (isBlank(this.viewProviders.get(provider.token))) {\n        this.viewProviders.add(provider.token, true);\n      }\n    });\n  }\n}\n\nexport class ProviderElementContext {\n  private _contentQueries: CompileIdentifierMap<CompileTokenMetadata, CompileQueryMetadata[]>;\n\n  private _transformedProviders = new CompileIdentifierMap<CompileTokenMetadata, ProviderAst>();\n  private _seenProviders = new CompileIdentifierMap<CompileTokenMetadata, boolean>();\n  private _allProviders: CompileIdentifierMap<CompileTokenMetadata, ProviderAst>;\n  private _attrs: {[key: string]: string};\n  private _hasViewContainer: boolean = false;\n\n  constructor(\n      private _viewContext: ProviderViewContext, private _parent: ProviderElementContext,\n      private _isViewRoot: boolean, private _directiveAsts: DirectiveAst[], attrs: AttrAst[],\n      refs: ReferenceAst[], private _sourceSpan: ParseSourceSpan) {\n    this._attrs = {};\n    attrs.forEach((attrAst) => this._attrs[attrAst.name] = attrAst.value);\n    var directivesMeta = _directiveAsts.map(directiveAst => directiveAst.directive);\n    this._allProviders =\n        _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, _viewContext.errors);\n    this._contentQueries = _getContentQueries(directivesMeta);\n    var queriedTokens = new CompileIdentifierMap<CompileTokenMetadata, boolean>();\n    this._allProviders.values().forEach(\n        (provider) => { this._addQueryReadsTo(provider.token, queriedTokens); });\n    refs.forEach((refAst) => {\n      this._addQueryReadsTo(new CompileTokenMetadata({value: refAst.name}), queriedTokens);\n    });\n    if (isPresent(queriedTokens.get(identifierToken(Identifiers.ViewContainerRef)))) {\n      this._hasViewContainer = true;\n    }\n\n    // create the providers that we know are eager first\n    this._allProviders.values().forEach((provider) => {\n      const eager = provider.eager || isPresent(queriedTokens.get(provider.token));\n      if (eager) {\n        this._getOrCreateLocalProvider(provider.providerType, provider.token, true);\n      }\n    });\n  }\n\n  afterElement() {\n    // collect lazy providers\n    this._allProviders.values().forEach((provider) => {\n      this._getOrCreateLocalProvider(provider.providerType, provider.token, false);\n    });\n  }\n\n  get transformProviders(): ProviderAst[] { return this._transformedProviders.values(); }\n\n  get transformedDirectiveAsts(): DirectiveAst[] {\n    var sortedProviderTypes =\n        this._transformedProviders.values().map(provider => provider.token.identifier);\n    var sortedDirectives = ListWrapper.clone(this._directiveAsts);\n    ListWrapper.sort(\n        sortedDirectives, (dir1, dir2) => sortedProviderTypes.indexOf(dir1.directive.type) -\n            sortedProviderTypes.indexOf(dir2.directive.type));\n    return sortedDirectives;\n  }\n\n  get transformedHasViewContainer(): boolean { return this._hasViewContainer; }\n\n  private _addQueryReadsTo(\n      token: CompileTokenMetadata,\n      queryReadTokens: CompileIdentifierMap<CompileTokenMetadata, boolean>) {\n    this._getQueriesFor(token).forEach((query) => {\n      const queryReadToken = isPresent(query.read) ? query.read : token;\n      if (isBlank(queryReadTokens.get(queryReadToken))) {\n        queryReadTokens.add(queryReadToken, true);\n      }\n    });\n  }\n\n  private _getQueriesFor(token: CompileTokenMetadata): CompileQueryMetadata[] {\n    var result: CompileQueryMetadata[] = [];\n    var currentEl: ProviderElementContext = this;\n    var distance = 0;\n    var queries: CompileQueryMetadata[];\n    while (currentEl !== null) {\n      queries = currentEl._contentQueries.get(token);\n      if (isPresent(queries)) {\n        ListWrapper.addAll(result, queries.filter((query) => query.descendants || distance <= 1));\n      }\n      if (currentEl._directiveAsts.length > 0) {\n        distance++;\n      }\n      currentEl = currentEl._parent;\n    }\n    queries = this._viewContext.viewQueries.get(token);\n    if (isPresent(queries)) {\n      ListWrapper.addAll(result, queries);\n    }\n    return result;\n  }\n\n\n  private _getOrCreateLocalProvider(\n      requestingProviderType: ProviderAstType, token: CompileTokenMetadata,\n      eager: boolean): ProviderAst {\n    var resolvedProvider = this._allProviders.get(token);\n    if (isBlank(resolvedProvider) ||\n        ((requestingProviderType === ProviderAstType.Directive ||\n          requestingProviderType === ProviderAstType.PublicService) &&\n         resolvedProvider.providerType === ProviderAstType.PrivateService) ||\n        ((requestingProviderType === ProviderAstType.PrivateService ||\n          requestingProviderType === ProviderAstType.PublicService) &&\n         resolvedProvider.providerType === ProviderAstType.Builtin)) {\n      return null;\n    }\n    var transformedProviderAst = this._transformedProviders.get(token);\n    if (isPresent(transformedProviderAst)) {\n      return transformedProviderAst;\n    }\n    if (isPresent(this._seenProviders.get(token))) {\n      this._viewContext.errors.push(new ProviderError(\n          `Cannot instantiate cyclic dependency! ${token.name}`, this._sourceSpan));\n      return null;\n    }\n    this._seenProviders.add(token, true);\n    var transformedProviders = resolvedProvider.providers.map((provider) => {\n      var transformedUseValue = provider.useValue;\n      var transformedUseExisting = provider.useExisting;\n      var transformedDeps: CompileDiDependencyMetadata[];\n      if (isPresent(provider.useExisting)) {\n        var existingDiDep = this._getDependency(\n            resolvedProvider.providerType,\n            new CompileDiDependencyMetadata({token: provider.useExisting}), eager);\n        if (isPresent(existingDiDep.token)) {\n          transformedUseExisting = existingDiDep.token;\n        } else {\n          transformedUseExisting = null;\n          transformedUseValue = existingDiDep.value;\n        }\n      } else if (isPresent(provider.useFactory)) {\n        var deps = isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps;\n        transformedDeps =\n            deps.map((dep) => this._getDependency(resolvedProvider.providerType, dep, eager));\n      } else if (isPresent(provider.useClass)) {\n        var deps = isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps;\n        transformedDeps =\n            deps.map((dep) => this._getDependency(resolvedProvider.providerType, dep, eager));\n      }\n      return _transformProvider(provider, {\n        useExisting: transformedUseExisting,\n        useValue: transformedUseValue,\n        deps: transformedDeps\n      });\n    });\n    transformedProviderAst =\n        _transformProviderAst(resolvedProvider, {eager: eager, providers: transformedProviders});\n    this._transformedProviders.add(token, transformedProviderAst);\n    return transformedProviderAst;\n  }\n\n  private _getLocalDependency(\n      requestingProviderType: ProviderAstType, dep: CompileDiDependencyMetadata,\n      eager: boolean = null): CompileDiDependencyMetadata {\n    if (dep.isAttribute) {\n      var attrValue = this._attrs[dep.token.value];\n      return new CompileDiDependencyMetadata({isValue: true, value: normalizeBlank(attrValue)});\n    }\n    if (isPresent(dep.query) || isPresent(dep.viewQuery)) {\n      return dep;\n    }\n\n    if (isPresent(dep.token)) {\n      // access builtints\n      if ((requestingProviderType === ProviderAstType.Directive ||\n           requestingProviderType === ProviderAstType.Component)) {\n        if (dep.token.equalsTo(identifierToken(Identifiers.Renderer)) ||\n            dep.token.equalsTo(identifierToken(Identifiers.ElementRef)) ||\n            dep.token.equalsTo(identifierToken(Identifiers.ChangeDetectorRef)) ||\n            dep.token.equalsTo(identifierToken(Identifiers.TemplateRef))) {\n          return dep;\n        }\n        if (dep.token.equalsTo(identifierToken(Identifiers.ViewContainerRef))) {\n          this._hasViewContainer = true;\n        }\n      }\n      // access the injector\n      if (dep.token.equalsTo(identifierToken(Identifiers.Injector))) {\n        return dep;\n      }\n      // access providers\n      if (isPresent(this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager))) {\n        return dep;\n      }\n    }\n    return null;\n  }\n\n  private _getDependency(\n      requestingProviderType: ProviderAstType, dep: CompileDiDependencyMetadata,\n      eager: boolean = null): CompileDiDependencyMetadata {\n    var currElement: ProviderElementContext = this;\n    var currEager: boolean = eager;\n    var result: CompileDiDependencyMetadata = null;\n    if (!dep.isSkipSelf) {\n      result = this._getLocalDependency(requestingProviderType, dep, eager);\n    }\n    if (dep.isSelf) {\n      if (isBlank(result) && dep.isOptional) {\n        result = new CompileDiDependencyMetadata({isValue: true, value: null});\n      }\n    } else {\n      // check parent elements\n      while (isBlank(result) && isPresent(currElement._parent)) {\n        var prevElement = currElement;\n        currElement = currElement._parent;\n        if (prevElement._isViewRoot) {\n          currEager = false;\n        }\n        result = currElement._getLocalDependency(ProviderAstType.PublicService, dep, currEager);\n      }\n      // check @Host restriction\n      if (isBlank(result)) {\n        if (!dep.isHost || this._viewContext.component.type.isHost ||\n            identifierToken(this._viewContext.component.type).equalsTo(dep.token) ||\n            isPresent(this._viewContext.viewProviders.get(dep.token))) {\n          result = dep;\n        } else {\n          result = dep.isOptional ?\n              result = new CompileDiDependencyMetadata({isValue: true, value: null}) :\n              null;\n        }\n      }\n    }\n    if (isBlank(result)) {\n      this._viewContext.errors.push(\n          new ProviderError(`No provider for ${dep.token.name}`, this._sourceSpan));\n    }\n    return result;\n  }\n}\n\n\nexport class NgModuleProviderAnalyzer {\n  private _transformedProviders = new CompileIdentifierMap<CompileTokenMetadata, ProviderAst>();\n  private _seenProviders = new CompileIdentifierMap<CompileTokenMetadata, boolean>();\n  private _unparsedProviders: any[] = [];\n  private _allProviders: CompileIdentifierMap<CompileTokenMetadata, ProviderAst>;\n  private _errors: ProviderError[] = [];\n\n  constructor(\n      ngModule: CompileNgModuleMetadata, extraProviders: CompileProviderMetadata[],\n      sourceSpan: ParseSourceSpan) {\n    this._allProviders = new CompileIdentifierMap<CompileTokenMetadata, ProviderAst>();\n    const ngModuleTypes = ngModule.transitiveModule.modules.map((moduleMeta) => moduleMeta.type);\n    ngModuleTypes.forEach((ngModuleType: CompileTypeMetadata) => {\n      const ngModuleProvider = new CompileProviderMetadata(\n          {token: new CompileTokenMetadata({identifier: ngModuleType}), useClass: ngModuleType});\n      _resolveProviders(\n          [ngModuleProvider], ProviderAstType.PublicService, true, sourceSpan, this._errors,\n          this._allProviders);\n    });\n    _resolveProviders(\n        _normalizeProviders(\n            ngModule.transitiveModule.providers.concat(extraProviders), sourceSpan, this._errors),\n        ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders);\n  }\n\n  parse(): ProviderAst[] {\n    this._allProviders.values().forEach(\n        (provider) => { this._getOrCreateLocalProvider(provider.token, provider.eager); });\n    if (this._errors.length > 0) {\n      const errorString = this._errors.join('\\n');\n      throw new BaseException(`Provider parse errors:\\n${errorString}`);\n    }\n    return this._transformedProviders.values();\n  }\n\n  private _getOrCreateLocalProvider(token: CompileTokenMetadata, eager: boolean): ProviderAst {\n    var resolvedProvider = this._allProviders.get(token);\n    if (isBlank(resolvedProvider)) {\n      return null;\n    }\n    var transformedProviderAst = this._transformedProviders.get(token);\n    if (isPresent(transformedProviderAst)) {\n      return transformedProviderAst;\n    }\n    if (isPresent(this._seenProviders.get(token))) {\n      this._errors.push(new ProviderError(\n          `Cannot instantiate cyclic dependency! ${token.name}`, resolvedProvider.sourceSpan));\n      return null;\n    }\n    this._seenProviders.add(token, true);\n    var transformedProviders = resolvedProvider.providers.map((provider) => {\n      var transformedUseValue = provider.useValue;\n      var transformedUseExisting = provider.useExisting;\n      var transformedDeps: CompileDiDependencyMetadata[];\n      if (isPresent(provider.useExisting)) {\n        var existingDiDep = this._getDependency(\n            new CompileDiDependencyMetadata({token: provider.useExisting}), eager,\n            resolvedProvider.sourceSpan);\n        if (isPresent(existingDiDep.token)) {\n          transformedUseExisting = existingDiDep.token;\n        } else {\n          transformedUseExisting = null;\n          transformedUseValue = existingDiDep.value;\n        }\n      } else if (isPresent(provider.useFactory)) {\n        var deps = isPresent(provider.deps) ? provider.deps : provider.useFactory.diDeps;\n        transformedDeps =\n            deps.map((dep) => this._getDependency(dep, eager, resolvedProvider.sourceSpan));\n      } else if (isPresent(provider.useClass)) {\n        var deps = isPresent(provider.deps) ? provider.deps : provider.useClass.diDeps;\n        transformedDeps =\n            deps.map((dep) => this._getDependency(dep, eager, resolvedProvider.sourceSpan));\n      }\n      return _transformProvider(provider, {\n        useExisting: transformedUseExisting,\n        useValue: transformedUseValue,\n        deps: transformedDeps\n      });\n    });\n    transformedProviderAst =\n        _transformProviderAst(resolvedProvider, {eager: eager, providers: transformedProviders});\n    this._transformedProviders.add(token, transformedProviderAst);\n    return transformedProviderAst;\n  }\n\n  private _getDependency(\n      dep: CompileDiDependencyMetadata, eager: boolean = null,\n      requestorSourceSpan: ParseSourceSpan): CompileDiDependencyMetadata {\n    var foundLocal = false;\n    if (!dep.isSkipSelf && isPresent(dep.token)) {\n      // access the injector\n      if (dep.token.equalsTo(identifierToken(Identifiers.Injector)) ||\n          dep.token.equalsTo(identifierToken(Identifiers.ComponentFactoryResolver))) {\n        foundLocal = true;\n        // access providers\n      } else if (isPresent(this._getOrCreateLocalProvider(dep.token, eager))) {\n        foundLocal = true;\n      }\n    }\n    var result: CompileDiDependencyMetadata = dep;\n    if (dep.isSelf && !foundLocal) {\n      if (dep.isOptional) {\n        result = new CompileDiDependencyMetadata({isValue: true, value: null});\n      } else {\n        this._errors.push(\n            new ProviderError(`No provider for ${dep.token.name}`, requestorSourceSpan));\n      }\n    }\n    return result;\n  }\n}\n\nfunction _transformProvider(\n    provider: CompileProviderMetadata,\n    {useExisting, useValue, deps}:\n        {useExisting: CompileTokenMetadata, useValue: any, deps: CompileDiDependencyMetadata[]}) {\n  return new CompileProviderMetadata({\n    token: provider.token,\n    useClass: provider.useClass,\n    useExisting: useExisting,\n    useFactory: provider.useFactory,\n    useValue: useValue,\n    deps: deps,\n    multi: provider.multi\n  });\n}\n\nfunction _transformProviderAst(\n    provider: ProviderAst,\n    {eager, providers}: {eager: boolean, providers: CompileProviderMetadata[]}): ProviderAst {\n  return new ProviderAst(\n      provider.token, provider.multiProvider, provider.eager || eager, providers,\n      provider.providerType, provider.lifecycleHooks, provider.sourceSpan);\n}\n\nfunction _normalizeProviders(\n    providers: Array<CompileProviderMetadata|CompileTypeMetadata|any[]>,\n    sourceSpan: ParseSourceSpan, targetErrors: ParseError[],\n    targetProviders: CompileProviderMetadata[] = null): CompileProviderMetadata[] {\n  if (isBlank(targetProviders)) {\n    targetProviders = [];\n  }\n  if (isPresent(providers)) {\n    providers.forEach((provider) => {\n      if (isArray(provider)) {\n        _normalizeProviders(<any[]>provider, sourceSpan, targetErrors, targetProviders);\n      } else {\n        let normalizeProvider: CompileProviderMetadata;\n        if (provider instanceof CompileProviderMetadata) {\n          normalizeProvider = provider;\n        } else if (provider instanceof CompileTypeMetadata) {\n          normalizeProvider = new CompileProviderMetadata(\n              {token: new CompileTokenMetadata({identifier: provider}), useClass: provider});\n        } else {\n          targetErrors.push(new ProviderError(`Unknown provider type ${provider}`, sourceSpan));\n        }\n        if (isPresent(normalizeProvider)) {\n          targetProviders.push(normalizeProvider);\n        }\n      }\n    });\n  }\n  return targetProviders;\n}\n\n\nfunction _resolveProvidersFromDirectives(\n    directives: CompileDirectiveMetadata[], sourceSpan: ParseSourceSpan,\n    targetErrors: ParseError[]): CompileIdentifierMap<CompileTokenMetadata, ProviderAst> {\n  var providersByToken = new CompileIdentifierMap<CompileTokenMetadata, ProviderAst>();\n  directives.forEach((directive) => {\n    var dirProvider = new CompileProviderMetadata(\n        {token: new CompileTokenMetadata({identifier: directive.type}), useClass: directive.type});\n    _resolveProviders(\n        [dirProvider],\n        directive.isComponent ? ProviderAstType.Component : ProviderAstType.Directive, true,\n        sourceSpan, targetErrors, providersByToken);\n  });\n\n  // Note: directives need to be able to overwrite providers of a component!\n  var directivesWithComponentFirst =\n      directives.filter(dir => dir.isComponent).concat(directives.filter(dir => !dir.isComponent));\n  directivesWithComponentFirst.forEach((directive) => {\n    _resolveProviders(\n        _normalizeProviders(directive.providers, sourceSpan, targetErrors),\n        ProviderAstType.PublicService, false, sourceSpan, targetErrors, providersByToken);\n    _resolveProviders(\n        _normalizeProviders(directive.viewProviders, sourceSpan, targetErrors),\n        ProviderAstType.PrivateService, false, sourceSpan, targetErrors, providersByToken);\n  });\n  return providersByToken;\n}\n\nfunction _resolveProviders(\n    providers: CompileProviderMetadata[], providerType: ProviderAstType, eager: boolean,\n    sourceSpan: ParseSourceSpan, targetErrors: ParseError[],\n    targetProvidersByToken: CompileIdentifierMap<CompileTokenMetadata, ProviderAst>) {\n  providers.forEach((provider) => {\n    var resolvedProvider = targetProvidersByToken.get(provider.token);\n    if (isPresent(resolvedProvider) && resolvedProvider.multiProvider !== provider.multi) {\n      targetErrors.push(new ProviderError(\n          `Mixing multi and non multi provider is not possible for token ${resolvedProvider.token.name}`,\n          sourceSpan));\n    }\n    if (isBlank(resolvedProvider)) {\n      const lifecycleHooks =\n          provider.token.identifier && provider.token.identifier instanceof CompileTypeMetadata ?\n          provider.token.identifier.lifecycleHooks :\n          [];\n      resolvedProvider = new ProviderAst(\n          provider.token, provider.multi, eager || lifecycleHooks.length > 0, [provider],\n          providerType, lifecycleHooks, sourceSpan);\n      targetProvidersByToken.add(provider.token, resolvedProvider);\n    } else {\n      if (!provider.multi) {\n        ListWrapper.clear(resolvedProvider.providers);\n      }\n      resolvedProvider.providers.push(provider);\n    }\n  });\n}\n\n\nfunction _getViewQueries(component: CompileDirectiveMetadata):\n    CompileIdentifierMap<CompileTokenMetadata, CompileQueryMetadata[]> {\n  var viewQueries = new CompileIdentifierMap<CompileTokenMetadata, CompileQueryMetadata[]>();\n  if (isPresent(component.viewQueries)) {\n    component.viewQueries.forEach((query) => _addQueryToTokenMap(viewQueries, query));\n  }\n  component.type.diDeps.forEach((dep) => {\n    if (isPresent(dep.viewQuery)) {\n      _addQueryToTokenMap(viewQueries, dep.viewQuery);\n    }\n  });\n  return viewQueries;\n}\n\nfunction _getContentQueries(directives: CompileDirectiveMetadata[]):\n    CompileIdentifierMap<CompileTokenMetadata, CompileQueryMetadata[]> {\n  var contentQueries = new CompileIdentifierMap<CompileTokenMetadata, CompileQueryMetadata[]>();\n  directives.forEach(directive => {\n    if (isPresent(directive.queries)) {\n      directive.queries.forEach((query) => _addQueryToTokenMap(contentQueries, query));\n    }\n    directive.type.diDeps.forEach((dep) => {\n      if (isPresent(dep.query)) {\n        _addQueryToTokenMap(contentQueries, dep.query);\n      }\n    });\n  });\n  return contentQueries;\n}\n\nfunction _addQueryToTokenMap(\n    map: CompileIdentifierMap<CompileTokenMetadata, CompileQueryMetadata[]>,\n    query: CompileQueryMetadata) {\n  query.selectors.forEach((token: CompileTokenMetadata) => {\n    var entry = map.get(token);\n    if (isBlank(entry)) {\n      entry = [];\n      map.add(token, entry);\n    }\n    entry.push(query);\n  });\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}