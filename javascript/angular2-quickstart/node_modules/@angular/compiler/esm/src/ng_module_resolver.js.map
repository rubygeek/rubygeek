{"version":3,"file":"ng_module_resolver.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/ng_module_resolver.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAC,UAAU,EAAE,gBAAgB,EAAC,MAAM,eAAe;OAEnD,EAAC,eAAe,EAAE,SAAS,EAAC,MAAM,iBAAiB;OACnD,EAAC,aAAa,EAAC,MAAM,0BAA0B;OAC/C,EAAO,SAAS,EAAE,SAAS,EAAC,MAAM,eAAe;AAExD,6BAA6B,GAAQ;IACnC,MAAM,CAAC,GAAG,YAAY,gBAAgB,CAAC;AACzC,CAAC;AACD;IACE,YAAoB,UAAU,GAAoB,SAAS;QAAvC,eAAU,GAAV,UAAU,CAA6B;IAAG,CAAC;IAE/D,OAAO,CAAC,IAAU,EAAE,eAAe,GAAG,IAAI;QACxC,MAAM,YAAY,GACd,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAEhE,EAAE,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,YAAY,CAAC;QACtB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;gBACpB,MAAM,IAAI,aAAa,CAAC,mCAAmC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClF,CAAC;YACD,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;IACH,CAAC;AASH,CAAC;AARD,kBAAkB;AACX,2BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,+BAAc,GAA2D;IAChF,EAAC,IAAI,EAAE,eAAe,GAAG;CACxB,CACA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgModuleMetadata} from '@angular/core';\n\nimport {ReflectorReader, reflector} from '../core_private';\nimport {BaseException} from '../src/facade/exceptions';\nimport {Type, isPresent, stringify} from './facade/lang';\n\nfunction _isNgModuleMetadata(obj: any): obj is NgModuleMetadata {\n  return obj instanceof NgModuleMetadata;\n}\nexport class NgModuleResolver {\n  constructor(private _reflector: ReflectorReader = reflector) {}\n\n  resolve(type: Type, throwIfNotFound = true): NgModuleMetadata {\n    const ngModuleMeta: NgModuleMetadata =\n        this._reflector.annotations(type).find(_isNgModuleMetadata);\n\n    if (isPresent(ngModuleMeta)) {\n      return ngModuleMeta;\n    } else {\n      if (throwIfNotFound) {\n        throw new BaseException(`No NgModule metadata found for '${stringify(type)}'.`);\n      }\n      return null;\n    }\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: ReflectorReader, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}