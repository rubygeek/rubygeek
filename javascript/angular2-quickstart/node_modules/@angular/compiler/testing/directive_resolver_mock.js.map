{"version":3,"file":"directive_resolver_mock.js","sourceRoot":"","sources":["../../../../modules/@angular/compiler/testing/directive_resolver_mock.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEntryMetadata, Compiler, ComponentMetadata, DirectiveMetadata, Injectable, Injector, ViewMetadata, resolveForwardRef} from '@angular/core';\n\nimport {DirectiveResolver} from '../src/directive_resolver';\nimport {Map} from '../src/facade/collection';\nimport {BaseException} from '../src/facade/exceptions';\nimport {Type, isArray, isPresent, stringify} from '../src/facade/lang';\nexport class MockDirectiveResolver extends DirectiveResolver {\n  private _directives = new Map<Type, DirectiveMetadata>();\n  private _providerOverrides = new Map<Type, any[]>();\n  private _viewProviderOverrides = new Map<Type, any[]>();\n  private _views = new Map<Type, ViewMetadata>();\n  private _inlineTemplates = new Map<Type, string>();\n  private _animations = new Map<Type, AnimationEntryMetadata[]>();\n  private _directiveOverrides = new Map<Type, Map<Type, Type>>();\n\n  constructor(private _injector: Injector) { super(); }\n\n  private get _compiler(): Compiler { return this._injector.get(Compiler); }\n\n  private _clearCacheFor(component: Type) { this._compiler.clearCacheFor(component); }\n\n  resolve(type: Type, throwIfNotFound = true): DirectiveMetadata {\n    let metadata = this._directives.get(type);\n    if (!metadata) {\n      metadata = super.resolve(type, throwIfNotFound);\n    }\n    if (!metadata) {\n      return null;\n    }\n\n    const providerOverrides = this._providerOverrides.get(type);\n    const viewProviderOverrides = this._viewProviderOverrides.get(type);\n\n    let providers = metadata.providers;\n    if (isPresent(providerOverrides)) {\n      const originalViewProviders: any[] = isPresent(metadata.providers) ? metadata.providers : [];\n      providers = originalViewProviders.concat(providerOverrides);\n    }\n\n    if (metadata instanceof ComponentMetadata) {\n      let viewProviders = metadata.viewProviders;\n      if (isPresent(viewProviderOverrides)) {\n        const originalViewProviders: any[] =\n            isPresent(metadata.viewProviders) ? metadata.viewProviders : [];\n        viewProviders = originalViewProviders.concat(viewProviderOverrides);\n      }\n\n      let view = this._views.get(type);\n      if (!view) {\n        view = metadata;\n      }\n\n      const directives: any[] = [];\n      if (isPresent(view.directives)) {\n        flattenArray(view.directives, directives);\n      }\n      let animations = view.animations;\n      let templateUrl = view.templateUrl;\n      const directiveOverrides = this._directiveOverrides.get(type);\n\n      const inlineAnimations = this._animations.get(type);\n      if (isPresent(inlineAnimations)) {\n        animations = inlineAnimations;\n      }\n\n      let inlineTemplate = this._inlineTemplates.get(type);\n      if (isPresent(inlineTemplate)) {\n        templateUrl = null;\n      } else {\n        inlineTemplate = view.template;\n      }\n\n      if (isPresent(directiveOverrides) && isPresent(view.directives)) {\n        directiveOverrides.forEach((to, from) => {\n          var srcIndex = directives.indexOf(from);\n          if (srcIndex == -1) {\n            throw new BaseException(\n                `Overriden directive ${stringify(from)} not found in the template of ${stringify(type)}`);\n          }\n          directives[srcIndex] = to;\n        });\n      }\n\n      return new ComponentMetadata({\n        selector: metadata.selector,\n        inputs: metadata.inputs,\n        outputs: metadata.outputs,\n        host: metadata.host,\n        exportAs: metadata.exportAs,\n        moduleId: metadata.moduleId,\n        queries: metadata.queries,\n        changeDetection: metadata.changeDetection,\n        providers: providers,\n        viewProviders: viewProviders,\n        entryComponents: metadata.entryComponents,\n        template: inlineTemplate,\n        templateUrl: templateUrl,\n        directives: directives.length > 0 ? directives : null,\n        animations: animations,\n        styles: view.styles,\n        styleUrls: view.styleUrls,\n        pipes: view.pipes,\n        encapsulation: view.encapsulation,\n        interpolation: view.interpolation\n      });\n    }\n\n    return new DirectiveMetadata({\n      selector: metadata.selector,\n      inputs: metadata.inputs,\n      outputs: metadata.outputs,\n      host: metadata.host,\n      providers: providers,\n      exportAs: metadata.exportAs,\n      queries: metadata.queries\n    });\n  }\n\n  /**\n   * Overrides the {@link DirectiveMetadata} for a directive.\n   */\n  setDirective(type: Type, metadata: DirectiveMetadata): void {\n    this._directives.set(type, metadata);\n    this._clearCacheFor(type);\n  }\n\n  setProvidersOverride(type: Type, providers: any[]): void {\n    this._providerOverrides.set(type, providers);\n    this._clearCacheFor(type);\n  }\n\n  setViewProvidersOverride(type: Type, viewProviders: any[]): void {\n    this._viewProviderOverrides.set(type, viewProviders);\n    this._clearCacheFor(type);\n  }\n\n  /**\n   * Overrides the {@link ViewMetadata} for a component.\n   */\n  setView(component: Type, view: ViewMetadata): void {\n    this._views.set(component, view);\n    this._clearCacheFor(component);\n  }\n  /**\n   * Overrides the inline template for a component - other configuration remains unchanged.\n   */\n  setInlineTemplate(component: Type, template: string): void {\n    this._inlineTemplates.set(component, template);\n    this._clearCacheFor(component);\n  }\n\n  setAnimations(component: Type, animations: AnimationEntryMetadata[]): void {\n    this._animations.set(component, animations);\n    this._clearCacheFor(component);\n  }\n\n  /**\n   * Overrides a directive from the component {@link ViewMetadata}.\n   */\n  overrideViewDirective(component: Type, from: Type, to: Type): void {\n    var overrides = this._directiveOverrides.get(component);\n\n    if (!overrides) {\n      overrides = new Map<Type, Type>();\n      this._directiveOverrides.set(component, overrides);\n    }\n\n    overrides.set(from, to);\n    this._clearCacheFor(component);\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: Injector, },\n];\n}\n\nfunction flattenArray(tree: any[], out: Array<Type|any[]>): void {\n  if (!isPresent(tree)) return;\n  for (var i = 0; i < tree.length; i++) {\n    var item = resolveForwardRef(tree[i]);\n    if (isArray(item)) {\n      flattenArray(item, out);\n    } else {\n      out.push(item);\n    }\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}