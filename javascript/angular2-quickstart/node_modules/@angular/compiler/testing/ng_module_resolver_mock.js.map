{"version":3,"file":"ng_module_resolver_mock.js","sourceRoot":"","sources":["../../../../modules/@angular/compiler/testing/ng_module_resolver_mock.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;;AAEH,qBAAqE,eAAe,CAAC,CAAA;AAErF,sBAA+B,UAAU,CAAC,CAAA;AAC1C,2BAAkB,0BAA0B,CAAC,CAAA;AAC7C;IAA0C,wCAAgB;IAGxD,8BAAoB,SAAmB;QAAI,iBAAO,CAAC;QAA/B,cAAS,GAAT,SAAS,CAAU;QAF/B,eAAU,GAAG,IAAI,gBAAG,EAA0B,CAAC;IAEH,CAAC;IAErD,sBAAY,2CAAS;aAArB,cAAoC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,eAAQ,CAAC,CAAC,CAAC,CAAC;;;OAAA;IAElE,6CAAc,GAAtB,UAAuB,SAAe,IAAI,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IAEpF;;OAEG;IACH,0CAAW,GAAX,UAAY,IAAU,EAAE,QAA0B;QAChD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QACpC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC;IAED;;;;;OAKG;IACH,sCAAO,GAAP,UAAQ,IAAU,EAAE,eAAsB;QAAtB,+BAAsB,GAAtB,sBAAsB;QACxC,IAAI,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACzC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,QAAQ,GAAG,gBAAK,CAAC,OAAO,YAAC,IAAI,EAAE,eAAe,CAAC,CAAC;QAClD,CAAC;QACD,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC;IACH,kBAAkB;IACX,+BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,mCAAc,GAA2D;QAChF,EAAC,IAAI,EAAE,eAAQ,GAAG;KACjB,CAAC;IACF,2BAAC;AAAD,CAAC,AAtCD,CAA0C,wBAAgB,GAsCzD;AAtCY,4BAAoB,uBAsChC,CAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Compiler, Injectable, Injector, NgModuleMetadata, Type} from '@angular/core';\n\nimport {NgModuleResolver} from '../index';\nimport {Map} from '../src/facade/collection';\nexport class MockNgModuleResolver extends NgModuleResolver {\n  private _ngModules = new Map<Type, NgModuleMetadata>();\n\n  constructor(private _injector: Injector) { super(); }\n\n  private get _compiler(): Compiler { return this._injector.get(Compiler); }\n\n  private _clearCacheFor(component: Type) { this._compiler.clearCacheFor(component); }\n\n  /**\n   * Overrides the {@link NgModuleMetadata} for a module.\n   */\n  setNgModule(type: Type, metadata: NgModuleMetadata): void {\n    this._ngModules.set(type, metadata);\n    this._clearCacheFor(type);\n  }\n\n  /**\n   * Returns the {@link NgModuleMetadata} for a module:\n   * - Set the {@link NgModuleMetadata} to the overridden view when it exists or fallback to the\n   * default\n   * `NgModuleResolver`, see `setNgModule`.\n   */\n  resolve(type: Type, throwIfNotFound = true): NgModuleMetadata {\n    var metadata = this._ngModules.get(type);\n    if (!metadata) {\n      metadata = super.resolve(type, throwIfNotFound);\n    }\n    return metadata;\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: Injector, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}