{"version":3,"file":"digest.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/i18n/digest.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as i18n from './i18n_ast';\n\nexport function digestMessage(message: i18n.Message): string {\n  return strHash(serializeNodes(message.nodes).join('') + `[${message.meaning}]`);\n}\n\n/**\n * String hash function similar to java.lang.String.hashCode().\n * The hash code for a string is computed as\n * s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n * where s[i] is the ith character of the string and n is the length of\n * the string. We mod the result to make it between 0 (inclusive) and 2^32 (exclusive).\n *\n * Based on goog.string.hashCode from the Google Closure library\n * https://github.com/google/closure-library/\n *\n * @internal\n */\n// TODO(vicb): better algo (less collisions) ?\nexport function strHash(str: string): string {\n  let result: number = 0;\n  for (var i = 0; i < str.length; ++i) {\n    // Normalize to 4 byte range, 0 ... 2^32.\n    result = (31 * result + str.charCodeAt(i)) >>> 0;\n  }\n  return result.toString(16);\n}\n\n/**\n * Serialize the i18n ast to something xml-like in order to generate an UID.\n *\n * The visitor is also used in the i18n parser tests\n *\n * @internal\n */\nclass _SerializerVisitor implements i18n.Visitor {\n  visitText(text: i18n.Text, context: any): any { return text.value; }\n\n  visitContainer(container: i18n.Container, context: any): any {\n    return `[${container.children.map(child => child.visit(this)).join(', ')}]`;\n  }\n\n  visitIcu(icu: i18n.Icu, context: any): any {\n    let strCases = Object.keys(icu.cases).map((k: string) => `${k} {${icu.cases[k].visit(this)}}`);\n    return `{${icu.expression}, ${icu.type}, ${strCases.join(', ')}}`;\n  }\n\n  visitTagPlaceholder(ph: i18n.TagPlaceholder, context: any): any {\n    return ph.isVoid ?\n        `<ph tag name=\"${ph.startName}\"/>` :\n        `<ph tag name=\"${ph.startName}\">${ph.children.map(child => child.visit(this)).join(', ')}</ph name=\"${ph.closeName}\">`;\n  }\n\n  visitPlaceholder(ph: i18n.Placeholder, context: any): any {\n    return `<ph name=\"${ph.name}\">${ph.value}</ph>`;\n  }\n\n  visitIcuPlaceholder(ph: i18n.IcuPlaceholder, context?: any): any {\n    return `<ph icu name=\"${ph.name}\">${ph.value.visit(this)}</ph>`;\n  }\n}\n\nconst serializerVisitor = new _SerializerVisitor();\n\nexport function serializeNodes(nodes: i18n.Node[]): string[] {\n  return nodes.map(a => a.visit(serializerVisitor, null));\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}